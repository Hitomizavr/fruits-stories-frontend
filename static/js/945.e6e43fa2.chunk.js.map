{"version":3,"file":"static/js/945.e6e43fa2.chunk.js","mappings":";yKACe,SAASA,EAAgBC,EAAKC,EAAKC,GAYhD,OAXAD,GAAM,EAAAE,EAAA,GAAcF,MACTD,EACTI,OAAOC,eAAeL,EAAKC,EAAK,CAC9BC,MAAOA,EACPI,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZR,EAAIC,GAAOC,EAENF,CACT,CCbA,SAASS,EAAQC,EAAQC,GACvB,IAAIC,EAAOR,OAAOQ,KAAKF,GACvB,GAAIN,OAAOS,sBAAuB,CAChC,IAAIC,EAAUV,OAAOS,sBAAsBH,GAC3CC,IAAmBG,EAAUA,EAAQC,QAAO,SAAUC,GACpD,OAAOZ,OAAOa,yBAAyBP,EAAQM,GAAKV,UACtD,KAAKM,EAAKM,KAAKC,MAAMP,EAAME,EAC7B,CACA,OAAOF,CACT,CACe,SAASQ,EAAeC,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAS,MAAQF,UAAUD,GAAKC,UAAUD,GAAK,CAAC,EACpDA,EAAI,EAAIb,EAAQL,OAAOqB,IAAS,GAAIC,SAAQ,SAAUzB,GACpD,EAAeoB,EAAQpB,EAAKwB,EAAOxB,GACrC,IAAKG,OAAOuB,0BAA4BvB,OAAOwB,iBAAiBP,EAAQjB,OAAOuB,0BAA0BF,IAAWhB,EAAQL,OAAOqB,IAASC,SAAQ,SAAUzB,GAC5JG,OAAOC,eAAegB,EAAQpB,EAAKG,OAAOa,yBAAyBQ,EAAQxB,GAC7E,GACF,CACA,OAAOoB,CACT,kDCZO,SAASQ,EAAcC,EAAWC,EAASC,GAChD,IAAMC,EAAKC,SAASL,cAAcE,GAOlC,OANID,IACFG,EAAGH,UAAYA,GAEbE,GACFA,EAAWG,YAAYF,GAElBA,CACT,CAOO,SAASG,EAAeC,EAAIC,GAMjC,OALAD,EAAGE,EAAID,EAAGC,EACVF,EAAGG,EAAIF,EAAGE,OACIC,IAAVH,EAAGI,KACLL,EAAGK,GAAKJ,EAAGI,IAENL,CACT,CAKO,SAASM,EAAWC,GACzBA,EAAEL,EAAIM,KAAKC,MAAMF,EAAEL,GACnBK,EAAEJ,EAAIK,KAAKC,MAAMF,EAAEJ,EACrB,CASO,SAASO,EAAmBV,EAAIC,GACrC,IAAMC,EAAIM,KAAKG,IAAIX,EAAGE,EAAID,EAAGC,GACvBC,EAAIK,KAAKG,IAAIX,EAAGG,EAAIF,EAAGE,GAC7B,OAAOK,KAAKI,KAAMV,EAAIA,EAAMC,EAAIA,EAClC,CASO,SAASU,EAAYb,EAAIC,GAC9B,OAAOD,EAAGE,IAAMD,EAAGC,GAAKF,EAAGG,IAAMF,EAAGE,CACtC,CAUO,SAASW,EAAMC,EAAKC,EAAKC,GAC9B,OAAOT,KAAKQ,IAAIR,KAAKS,IAAIF,EAAKC,GAAMC,EACtC,CAUO,SAASC,EAAkBhB,EAAGC,EAAGgB,GACtC,IAAIC,EAAY,eAAHC,OAAkBnB,EAAC,OAAAmB,OAAMlB,GAAK,EAAC,SAM5C,YAJcC,IAAVe,IACFC,GAAa,YAAJC,OAAgBF,EAAK,KAAAE,OAAIF,EAAK,QAGlCC,CACT,CAUO,SAASE,EAAa1B,EAAIM,EAAGC,EAAGgB,GACrCvB,EAAG2B,MAAMC,UAAYN,EAAkBhB,EAAGC,EAAGgB,EAC/C,CAEA,IAAMM,EAAmB,2BAUlB,SAASC,EAAmB9B,EAAI+B,EAAMC,EAAUC,GAIrDjC,EAAG2B,MAAMO,WAAaH,EAAI,GAAAN,OACnBM,EAAI,KAAAN,OAAIO,EAAQ,OAAAP,OAAMQ,GAAQJ,GACjC,MACN,CASO,SAASM,EAAenC,EAAIoC,EAAGC,GACpCrC,EAAG2B,MAAMW,MAAsB,kBAANF,EAAc,GAAAX,OAAOW,EAAC,MAAOA,EACtDpC,EAAG2B,MAAMY,OAAuB,kBAANF,EAAc,GAAAZ,OAAOY,EAAC,MAAOA,CACzD,CA8BO,IAAMG,EACL,OADKA,EAEF,UAFEA,EAGH,SAHGA,EAIJ,QA0DF,SAASC,IACd,SAAUC,UAAUC,SAAUD,UAAUC,OAAOC,MAAM,UACvD,CCtOA,IAAIC,GAAkB,EAEtB,IAEEC,OAAOC,iBAAiB,OAAQ,KAAM5E,OAAOC,eAAe,CAAC,EAAG,UAAW,CACzE4E,IAAK,WACHH,GAAkB,CACxB,IAEA,CAAE,MAAOI,IAAI,CAGb,IAQMC,EAAS,WACb,SAAAA,KAAcC,EAAAA,EAAAA,GAAA,KAAAD,GAKZE,KAAKC,MAAQ,EACjB,CA+FG,OA7FHC,EAAAA,EAAAA,GAAAJ,EAAA,EAAAlF,IAAA,MAAAC,MAQE,SAAImB,EAAQmE,EAAMC,EAAUC,GAC1BL,KAAKM,gBAAgBtE,EAAQmE,EAAMC,EAAUC,EACjD,GAEA,CAAAzF,IAAA,SAAAC,MAQE,SAAOmB,EAAQmE,EAAMC,EAAUC,GAC7BL,KAAKM,gBAAgBtE,EAAQmE,EAAMC,EAAUC,GAAS,EAC1D,GAEA,CAAAzF,IAAA,YAAAC,MAGE,WAAY,IAAA0F,EAAA,KACVP,KAAKC,MAAM5D,SAAQ,SAACmE,GAClBD,EAAKD,gBACHE,EAASxE,OACTwE,EAASL,KACTK,EAASJ,SACTI,EAASH,SACT,GACA,EAER,IACIL,KAAKC,MAAQ,EACjB,GAEA,CAAArF,IAAA,kBAAAC,MAWE,SAAgBmB,EAAQmE,EAAMC,EAAUC,EAASI,EAAQC,GAAU,IAAAC,EAAA,KACjE,GAAK3E,EAAL,CAIA,IAAM4E,EAAaH,EAAS,sBAAwB,mBACtCN,EAAKU,MAAM,KACnBxE,SAAQ,SAACyE,GACb,GAAIA,EAAO,CAGJJ,IACCD,EAEFE,EAAKV,MAAQU,EAAKV,MAAMvE,QAAO,SAAC8E,GAC9B,OAAOA,EAASL,OAASW,GACpBN,EAASJ,WAAaA,GACtBI,EAASxE,SAAWA,CACvC,IAGY2E,EAAKV,MAAMpE,KAAK,CACdG,OAAAA,EACAmE,KAAMW,EACNV,SAAAA,EACAC,QAAAA,KAON,IAAMU,IAAetB,GAAkB,CAAEY,QAAUA,IAAW,GAE9DrE,EAAO4E,GACLE,EACAV,EACAW,EAEV,CACA,GArCA,CAsCA,KAAGjB,CAAA,CAtGY,GCXR,SAASkB,EAAgBC,EAASC,GACvC,GAAID,EAAQE,kBAAmB,CAC7B,IAAMC,EAAkBH,EAAQE,kBAAkBF,EAASC,GAC3D,GAAIE,EACF,OAAOA,CAEb,CAEE,MAAO,CACLlE,EAAGL,SAASwE,gBAAgBC,YAM5BnE,EAAGuC,OAAO6B,YAEd,CAqCO,SAASC,EAAmB7C,EAAMsC,EAASQ,EAAcC,EAAUC,GACxE,IAAIC,EAAe,EAEnB,GAAIX,EAAQY,UACVD,EAAeX,EAAQY,UAAUJ,EAAcC,EAAUC,GAAOhD,QAC3D,GAAIsC,EAAQa,QACjBF,EAAeX,EAAQa,QAAQnD,OAC1B,CACL,IAAMoD,EAAiB,UAAYpD,EAAK,GAAGqD,cAAgBrD,EAAKsD,MAAM,GAElEhB,EAAQc,KAEVH,EAAeX,EAAQc,GAE7B,CAEE,OAAOG,OAAON,IAAiB,CACjC,CASO,SAASO,EAAelB,EAASQ,EAAcC,EAAUC,GAC9D,MAAO,CACLzE,EAAGuE,EAAavE,EACZsE,EAAmB,OAAQP,EAASQ,EAAcC,EAAUC,GAC5DH,EAAmB,QAASP,EAASQ,EAAcC,EAAUC,GACjExE,EAAGsE,EAAatE,EACZqE,EAAmB,MAAOP,EAASQ,EAAcC,EAAUC,GAC3DH,EAAmB,SAAUP,EAASQ,EAAcC,EAAUC,GAEtE,CC5FA,IAGMS,EAAS,WAIb,SAAAA,EAAYC,IAAOtC,EAAAA,EAAAA,GAAA,KAAAqC,GACjBpC,KAAKqC,MAAQA,EACbrC,KAAKsC,cAAgB,EACrBtC,KAAKuC,OAA8B,CAAErF,EAAG,EAAGC,EAAG,GAC9C6C,KAAK/B,IAA2B,CAAEf,EAAG,EAAGC,EAAG,GAC3C6C,KAAKhC,IAA2B,CAAEd,EAAG,EAAGC,EAAG,EAC/C,CAwEG,OAtEH+C,EAAAA,EAAAA,GAAAkC,EAAA,EAAAxH,IAAA,SAAAC,MAKE,SAAOyH,GACLtC,KAAKsC,cAAgBA,EAEhBtC,KAAKqC,MAAMnD,OAGdc,KAAKwC,YAAY,KACjBxC,KAAKwC,YAAY,KACjBxC,KAAKqC,MAAMnB,KAAKuB,SAAS,aAAc,CAAEJ,MAAOrC,KAAKqC,SAJrDrC,KAAK0C,OAMX,GAEA,CAAA9H,IAAA,cAAAC,MAKE,SAAY8H,GACV,IAAQzB,EAASlB,KAAKqC,MAAdnB,KACF0B,EAAS5C,KAAKqC,MAAe,MAATM,EAAe,QAAU,UAAY3C,KAAKsC,cAE9DR,EAAUN,EADa,MAATmB,EAAe,OAAS,MAG1CzB,EAAKD,QACLC,EAAKO,aACLzB,KAAKqC,MAAMQ,KACX7C,KAAKqC,MAAMV,OAGPmB,EAAc9C,KAAKqC,MAAMS,YAAYH,GAI3C3C,KAAKuC,OAAOI,GAAQnF,KAAKC,OAAOqF,EAAcF,GAAU,GAAKd,EAG7D9B,KAAK/B,IAAI0E,GAASC,EAASE,EACvBtF,KAAKC,MAAMqF,EAAcF,GAAUd,EACnC9B,KAAKuC,OAAOI,GAGhB3C,KAAKhC,IAAI2E,GAASC,EAASE,EACvBhB,EACA9B,KAAKuC,OAAOI,EACpB,GAEA,CAAA/H,IAAA,QAAAC,MACE,WACEmF,KAAKuC,OAAOrF,EAAI,EAChB8C,KAAKuC,OAAOpF,EAAI,EAChB6C,KAAK/B,IAAIf,EAAI,EACb8C,KAAK/B,IAAId,EAAI,EACb6C,KAAKhC,IAAId,EAAI,EACb8C,KAAKhC,IAAIb,EAAI,CACjB,GAEA,CAAAvC,IAAA,aAAAC,MAOE,SAAW8H,EAAMI,GACf,OAAOjF,EAAMiF,EAAW/C,KAAK/B,IAAI0E,GAAO3C,KAAKhC,IAAI2E,GACrD,KAAGP,CAAA,CAlFY,GCGTY,EAAS,WAOb,SAAAA,EAAY/B,EAASS,EAAUC,EAAOT,IAAMnB,EAAAA,EAAAA,GAAA,KAAAiD,GAC1ChD,KAAKkB,KAAOA,EACZlB,KAAKiB,QAAUA,EACfjB,KAAK0B,SAAWA,EAChB1B,KAAK2B,MAAQA,EAEb3B,KAAK8C,YAAc,KAEnB9C,KAAKiD,YAAc,KACnBjD,KAAKkD,IAAM,EACXlD,KAAKmD,KAAO,EACZnD,KAAKoD,MAAQ,EACbpD,KAAKqD,QAAU,EACfrD,KAAKsD,UAAY,EACjBtD,KAAK/B,IAAM,EACX+B,KAAKhC,IAAM,CACf,CA8HG,OA5HHkC,EAAAA,EAAAA,GAAA8C,EAAA,EAAApI,IAAA,SAAAC,MASE,SAAO0I,EAAUC,EAAWV,GAE1B,IAAMG,EAAc,CAAE/F,EAAGqG,EAAUpG,EAAGqG,GACtCxD,KAAKiD,YAAcA,EACnBjD,KAAK8C,YAAcA,EAEnB,IAAMW,EAASX,EAAY5F,EAAI+F,EAAY/F,EACrCwG,EAASZ,EAAY3F,EAAI8F,EAAY9F,EAE3C6C,KAAKkD,IAAM1F,KAAKQ,IAAI,EAAGyF,EAASC,EAASD,EAASC,GAClD1D,KAAKmD,KAAO3F,KAAKQ,IAAI,EAAGyF,EAASC,EAASD,EAASC,GAInD1D,KAAKoD,MAAQ5F,KAAKQ,IAAI,EAAG0F,GAEzB1D,KAAKqD,QAAUrD,KAAK2D,cACpB3D,KAAKsD,UAAYtD,KAAK4D,gBACtB5D,KAAK/B,IAAMT,KAAKS,IACd+B,KAAKqD,QACLrD,KAAKsD,UACLtD,KAAK6D,WAGP7D,KAAKhC,IAAMR,KAAKQ,IACdgC,KAAKkD,IACLlD,KAAKqD,QACLrD,KAAKsD,WAGHtD,KAAKkB,MACPlB,KAAKkB,KAAKuB,SAAS,mBAAoB,CAAEqB,WAAY9D,KAAM+D,UAAW/D,KAAK0B,UAEjF,GAEA,CAAA9G,IAAA,wBAAAC,MAOE,SAAsBmJ,GACpB,IAAMC,EACJD,EAAe,YAEXE,EAAclE,KAAKiB,QAAQgD,GAEjC,GAAKC,EAIL,MAA2B,oBAAhBA,EACFA,EAAYlE,MAGD,SAAhBkE,EACKlE,KAAKmD,KAGM,QAAhBe,EACKlE,KAAKkD,IAGPhB,OAAOgC,EAClB,GAEA,CAAAtJ,IAAA,gBAAAC,MASE,WACE,IAAIyH,EAAgBtC,KAAKmE,sBAAsB,aAE/C,OAAI7B,IAKJA,EAAgB9E,KAAKQ,IAAI,EAAc,EAAXgC,KAAKkD,KAE7BlD,KAAKiD,aAAeX,EAAgBtC,KAAKiD,YAAY/F,EArIrC,MAsIlBoF,EAtIkB,IAsIgBtC,KAAKiD,YAAY/F,GAG9CoF,EACX,GAEA,CAAA1H,IAAA,cAAAC,MAME,WACE,OAAOmF,KAAKmE,sBAAsB,YAAcnE,KAAKkD,GACzD,GAEA,CAAAtI,IAAA,UAAAC,MAQE,WAGE,OAAOmF,KAAKmE,sBAAsB,QAAU3G,KAAKS,IAAI,EAAc,EAAX+B,KAAKkD,IACjE,KAAGF,CAAA,CArJY,GCuBToB,EAAK,WAMT,SAAAA,EAAYvB,EAAMlB,EAAOT,IAAMnB,EAAAA,EAAAA,GAAA,KAAAqE,GAC7BpE,KAAK6C,KAAOA,EACZ7C,KAAK2B,MAAQA,EACb3B,KAAKkB,KAAOA,EACZlB,KAAKqE,SAAY1C,IAAUT,EAAKoD,UAChCtE,KAAKuE,kBAAoB,EAEzBvE,KAAK8C,YAAc,CAAE5F,EAAG,EAAGC,EAAG,GAE9B6C,KAAKwE,IAAM,CAAEtH,EAAG,EAAGC,EAAG,GAEtB6C,KAAKyE,aAAgBzE,KAAKqE,WAAanD,EAAKwD,OAAOC,OAEnD3E,KAAK8D,WAAa,IAAId,EAAU9B,EAAKD,QAAS4B,EAAMlB,EAAOT,GAE3DlB,KAAKkB,KAAKuB,SAAS,cAAe,CAChCJ,MAAOrC,KACP6C,KAAM7C,KAAK6C,KACXlB,MAAAA,IAGF3B,KAAK4E,QAAU5E,KAAKkB,KAAK2D,cAAcC,kBAAkB9E,MACzDA,KAAK+E,UAAYvI,EAAc,kBAAmB,OAElDwD,KAAKgF,cAAgB,KAErBhF,KAAKsC,cAAgB,EAErBtC,KAAKd,MAAQc,KAAK4E,QAAQ1F,MAE1Bc,KAAKb,OAASa,KAAK4E,QAAQzF,OAC3Ba,KAAKiF,eAAgB,EACrBjF,KAAKkF,OAAS,IAAI9C,EAAUpC,MAE5BA,KAAKmF,oBAAsB,EAC3BnF,KAAKoF,qBAAuB,EAE5BpF,KAAKkB,KAAKuB,SAAS,YAAa,CAAEJ,MAAOrC,MAC7C,CAuaG,OAraHE,EAAAA,EAAAA,GAAAkE,EAAA,EAAAxJ,IAAA,cAAAC,MAKE,SAAYwJ,GACNA,IAAarE,KAAKqE,SAEpBrE,KAAKqF,YACKhB,GAAYrE,KAAKqE,UAE3BrE,KAAKsF,YAEX,GAEA,CAAA1K,IAAA,SAAAC,MAKE,SAAOmK,GACLhF,KAAKgF,cAAgBA,EAErBhF,KAAK+E,UAAUxG,MAAMgH,gBAAkB,MAGlCvF,KAAK6C,OAIV7C,KAAKwF,gBAELxF,KAAKyF,OACLzF,KAAK0F,oBACL1F,KAAK2F,cAEL3F,KAAKgF,cAAclI,YAAYkD,KAAK+E,WAEpC/E,KAAK4F,sBAEL5F,KAAKkB,KAAKuB,SAAS,eAAgB,CAAEJ,MAAOrC,OAE5CA,KAAK6F,sBAEL7F,KAAKkB,KAAKuB,SAAS,kBAAmB,CAAEJ,MAAOrC,OAE3CA,KAAKqE,UACPrE,KAAKqF,WAEX,GAAG,CAAAzK,IAAA,OAAAC,MAED,WACEmF,KAAK4E,QAAQa,MAAK,GAClBzF,KAAKkB,KAAKuB,SAAS,YAAa,CAAEJ,MAAOrC,MAC7C,GAEA,CAAApF,IAAA,cAAAC,MAME,WACE,IAAQqG,EAASlB,KAATkB,MAIJlB,KAAKiF,eACD/D,EAAKwD,OAAOC,SACbzD,EAAK4E,WAAWC,cACd/F,KAAKqE,SAAN,KAIJrE,KAAKkB,KAAKuB,SAAS,cAAe,CAAEJ,MAAOrC,OAAQgG,mBAIvDhG,KAAKiF,eAAgB,EAErBjF,KAAK4E,QAAQqB,SAEbjG,KAAKkB,KAAKuB,SAAS,qBAAsB,CAAEJ,MAAOrC,QACtD,GAEA,CAAApF,IAAA,WAAAC,MAME,WACEmF,KAAKqE,UAAW,EAChBrE,KAAK2F,cACL3F,KAAK4E,QAAQS,WACbrF,KAAKkB,KAAKuB,SAAS,gBAAiB,CAAEJ,MAAOrC,MACjD,GAEA,CAAApF,IAAA,aAAAC,MAKE,WACEmF,KAAKqE,UAAW,EAChBrE,KAAK4E,QAAQU,aAETtF,KAAKsC,gBAAkBtC,KAAK8D,WAAWT,SAEzCrD,KAAKwF,gBAIPxF,KAAKuE,kBAAoB,EACzBvE,KAAK4F,sBACL5F,KAAK6F,sBACL7F,KAAK0F,oBAEL1F,KAAKkB,KAAKuB,SAAS,kBAAmB,CAAEJ,MAAOrC,MACnD,GAEA,CAAApF,IAAA,UAAAC,MAIE,WACEmF,KAAK4E,QAAQsB,UAAW,EACxBlG,KAAK4E,QAAQuB,SACbnG,KAAK+E,UAAUoB,SACfnG,KAAKkB,KAAKuB,SAAS,eAAgB,CAAEJ,MAAOrC,MAChD,GAAG,CAAApF,IAAA,SAAAC,MAED,WACMmF,KAAKsC,gBAAkBtC,KAAK8D,WAAWT,SAAYrD,KAAKqE,UAY1DrE,KAAKwF,gBACLxF,KAAKkF,OAAOkB,OAAOpG,KAAKsC,eACxBtC,KAAKqG,MAAMrG,KAAKwE,IAAItH,EAAG8C,KAAKwE,IAAIrH,KAThC6C,KAAKwF,gBACLxF,KAAKuE,kBAAoB,EACzBvE,KAAK4F,sBACL5F,KAAK6F,sBACL7F,KAAK0F,oBAOX,GAGA,CAAA9K,IAAA,oBAAAC,MAME,SAAkByL,GAGhB,IAAMC,EAAkBvG,KAAKuE,mBAAqBvE,KAAK8D,WAAWT,QAElE,GAAKkD,EAAL,CAIA,IAAMrH,EAAQ1B,KAAKC,MAAMuC,KAAKd,MAAQqH,IAAoBvG,KAAKkB,KAAKO,aAAavE,EAC3EiC,EAAS3B,KAAKC,MAAMuC,KAAKb,OAASoH,IAAoBvG,KAAKkB,KAAKO,aAAatE,GAE9E6C,KAAKwG,YAAYtH,EAAOC,IAAYmH,IAGzCtG,KAAK4E,QAAQ6B,iBAAiBvH,EAAOC,EARzC,CASA,GAEA,CAAAvE,IAAA,cAAAC,MAIE,SAAYqE,EAAOC,GACjB,OAAID,IAAUc,KAAKmF,oBACZhG,IAAWa,KAAKoF,uBACrBpF,KAAKmF,mBAAqBjG,EAC1Bc,KAAKoF,oBAAsBjG,GACpB,EAIb,GAEA,CAAAvE,IAAA,wBAAAC,MACE,WAAwB,IAAA6L,EACtB,OAA+B,QAA/BA,EAAO1G,KAAK4E,QAAQ+B,mBAAW,IAAAD,OAAA,EAAxBA,EAA0BE,OACrC,GAEA,CAAAhM,IAAA,SAAAC,MASE,SAAOgM,EAAeC,EAAaC,EAAoBC,GAAc,IAAAC,EAAA,KAC3D/F,EAASlB,KAATkB,KACR,GAAKlB,KAAKkH,eACHhG,EAAK4E,WAAWC,YADvB,CAKA7E,EAAKuB,SAAS,eAAgB,CAC5BoE,cAAAA,EAAeC,YAAAA,EAAaC,mBAAAA,IAI9B7F,EAAKiG,WAAWC,aAMhB,IAAMC,EAAgBrH,KAAKsC,cAEtB0E,IACHH,EAAgB/I,EAAM+I,EAAe7G,KAAK8D,WAAW9F,IAAKgC,KAAK8D,WAAW7F,MAO5E+B,KAAKsH,aAAaT,GAClB7G,KAAKwE,IAAItH,EAAI8C,KAAKuH,yBAAyB,IAAKT,EAAaO,GAC7DrH,KAAKwE,IAAIrH,EAAI6C,KAAKuH,yBAAyB,IAAKT,EAAaO,GAC7D/J,EAAW0C,KAAKwE,KAEhB,IAAMgD,EAAmB,WACvBP,EAAKQ,eAAeZ,GACpBI,EAAKpB,qBACX,EAESkB,EAGH7F,EAAKiG,WAAWO,gBAAgB,CAC9BC,OAAO,EACPC,KAAM,SACN5L,OAAQgE,KAAK+E,UACbvG,UAAWwB,KAAK6H,sBAChBC,WAAYN,EACZ5I,SAAUmI,EACVgB,OAAQ7G,EAAKD,QAAQ8G,SATvBP,GAlCN,CA8CA,GAEA,CAAA5M,IAAA,aAAAC,MAGE,SAAWiM,GACT9G,KAAKgI,OACHhI,KAAKsC,gBAAkBtC,KAAK8D,WAAWT,QACnCrD,KAAK8D,WAAWR,UAAYtD,KAAK8D,WAAWT,QAChDyD,EACA9G,KAAKkB,KAAKD,QAAQgH,sBAExB,GAEA,CAAArN,IAAA,eAAAC,MAME,SAAayH,GACXtC,KAAKsC,cAAgBA,EACrBtC,KAAKkF,OAAOkB,OAAOpG,KAAKsC,cAC5B,GAEA,CAAA1H,IAAA,2BAAAC,MAaE,SAAyB8H,EAAMuF,EAAOb,GAEpC,GAAyB,IADArH,KAAKkF,OAAOjH,IAAI0E,GAAQ3C,KAAKkF,OAAOlH,IAAI2E,GAE/D,OAAO3C,KAAKkF,OAAO3C,OAAOI,GAGvBuF,IACHA,EAAQlI,KAAKkB,KAAKiH,0BAGfd,IACHA,EAAgBrH,KAAK8D,WAAWT,SAGlC,IAAM+E,EAAapI,KAAKsC,cAAgB+E,EACxC,OAAOrH,KAAKkF,OAAOmD,WACjB1F,GACC3C,KAAKwE,IAAI7B,GAAQuF,EAAMvF,IAASyF,EAAaF,EAAMvF,GAE1D,GAEA,CAAA/H,IAAA,QAAAC,MAME,SAAMyN,EAAMC,GACVvI,KAAKwE,IAAItH,EAAI8C,KAAKkF,OAAOmD,WAAW,IAAKC,GACzCtI,KAAKwE,IAAIrH,EAAI6C,KAAKkF,OAAOmD,WAAW,IAAKE,GACzCvI,KAAK6F,qBACT,GAEA,CAAAjL,IAAA,aAAAC,MAIE,WACE,OAAO2N,QAAQxI,KAAKd,QAAWc,KAAKsC,cAAgBtC,KAAK8D,WAAWZ,GACxE,GAEA,CAAAtI,IAAA,aAAAC,MAIE,WACE,OAAO2N,QAAQxI,KAAKd,QAAUc,KAAK4E,QAAQsC,YAC/C,GAEA,CAAAtM,IAAA,sBAAAC,MAIE,WACEmF,KAAKyI,oBAAoBzI,KAAKwE,IAAItH,EAAG8C,KAAKwE,IAAIrH,EAAG6C,KAAKsC,eAClDtC,OAASA,KAAKkB,KAAKwH,WACrB1I,KAAKkB,KAAKuB,SAAS,gBAAiB,CAAEJ,MAAOrC,MAEnD,GAAG,CAAApF,IAAA,sBAAAC,MAED,WACEmF,KAAKsC,cAAgBtC,KAAK8D,WAAWT,QAGrCrD,KAAKkF,OAAOkB,OAAOpG,KAAKsC,eACxBvF,EAAeiD,KAAKwE,IAAKxE,KAAKkF,OAAO3C,QACrCvC,KAAKkB,KAAKuB,SAAS,iBAAkB,CAAEJ,MAAOrC,MAClD,GAEA,CAAApF,IAAA,sBAAAC,MAQE,SAAoBqC,EAAGC,EAAGwL,GACxBA,GAAQ3I,KAAKuE,mBAAqBvE,KAAK8D,WAAWT,QAClD/E,EAAa0B,KAAK+E,UAAW7H,EAAGC,EAAGwL,EACvC,GAAG,CAAA/N,IAAA,gBAAAC,MAED,WACE,IAAQqG,EAASlB,KAATkB,KAERnE,EACEiD,KAAK8C,YACLX,EAAejB,EAAKD,QAASC,EAAKO,aAAczB,KAAK6C,KAAM7C,KAAK2B,QAGlE3B,KAAK8D,WAAWsC,OAAOpG,KAAKd,MAAOc,KAAKb,OAAQa,KAAK8C,aAErD5B,EAAKuB,SAAS,gBAAiB,CAC7BJ,MAAOrC,MAEb,GAEA,CAAApF,IAAA,sBAAAC,MACE,WACE,IAAMsD,EAAQ6B,KAAKsC,eAAiBtC,KAAKuE,mBAAqBvE,KAAK8D,WAAWT,SAC9E,OAAOnF,EAAkB8B,KAAKwE,IAAItH,EAAG8C,KAAKwE,IAAIrH,EAAGgB,EACrD,GAEA,CAAAvD,IAAA,iBAAAC,MAeE,SAAe+N,GACTA,IAAkB5I,KAAKuE,oBAI3BvE,KAAKuE,kBAAoBqE,EACzB5I,KAAK0F,oBAEL1F,KAAKkB,KAAKuB,SAAS,qBACvB,KAAG2B,CAAA,CAndQ,GCVX,IAGMyE,EAAW,WAIf,SAAAA,EAAYC,IAAU/I,EAAAA,EAAAA,GAAA,KAAA8I,GACpB7I,KAAK8I,SAAWA,EAChB9I,KAAKkB,KAAO4H,EAAS5H,KAErBlB,KAAK+I,SAAW,CAAE7L,EAAG,EAAGC,EAAG,EAC/B,CA6TG,OA7TA+C,EAAAA,EAAAA,GAAA2I,EAAA,EAAAjO,IAAA,QAAAC,MAED,WACMmF,KAAKkB,KAAKwH,WACZ3L,EAAeiD,KAAK+I,SAAU/I,KAAKkB,KAAKwH,UAAUlE,KAEpDxE,KAAKkB,KAAKiG,WAAW6B,SACzB,GAAG,CAAApO,IAAA,SAAAC,MAED,WACE,IAAAoO,EAAiCjJ,KAAK8I,SAA9B9L,EAAEiM,EAAFjM,GAAIkM,EAAMD,EAANC,OAAQC,EAAQF,EAARE,SACZT,EAAc1I,KAAKkB,KAAnBwH,UAER,GAAiB,MAAbS,GACGnJ,KAAKkB,KAAKD,QAAQmI,qBACjBV,GAAaA,EAAUpG,eAAiBoG,EAAU5E,WAAWZ,MAC7DlD,KAAK8I,SAASO,aAAc,CAElC,IAAMd,EAAOG,EAAUlE,IAAIrH,GAAKH,EAAGG,EAAI+L,EAAO/L,GAC9C,IAAK6C,KAAKkB,KAAKuB,SAAS,eAAgB,CAAE8F,KAAAA,IAAQvC,iBAAkB,CAClEhG,KAAKsJ,oBAAoB,IAAKf,EAlDP,IAmDvB,IAAMgB,EAAY,EAAI/L,KAAKG,IAAIqC,KAAKwJ,sBAAsBd,EAAUlE,IAAIrH,IACxE6C,KAAKkB,KAAKuI,eAAeF,GACzBb,EAAU7C,qBAClB,CACA,KAAW,CACqB7F,KAAK0J,qBAAqB,OAElD1J,KAAK0J,qBAAqB,KAEtBhB,IACFpL,EAAWoL,EAAUlE,KACrBkE,EAAU7C,uBAGpB,CACA,GAAG,CAAAjL,IAAA,MAAAC,MAED,WACE,IAAQ8O,EAAa3J,KAAK8I,SAAlBa,SACRC,EAAkC5J,KAAKkB,KAA/B4E,EAAU8D,EAAV9D,WAAY4C,EAASkB,EAATlB,UAChBmB,EAAY,EAKhB,GAHA7J,KAAKkB,KAAKiG,WAAW6B,UAGjBlD,EAAWC,YAAa,CAE1B,IAMM+D,GANsBhE,EAAW5I,EAAI4I,EAAWiE,iBAMK/J,KAAKkB,KAAKO,aAAavE,EAU7EyM,EAASzM,GAvFS,IAuFoB4M,EAA8B,GACjEH,EAASzM,EAAI,IAAO4M,GAA+B,IAEzDD,EAAY,EACZF,EAASzM,EAAIM,KAAKQ,IAAI2L,EAASzM,EAAG,KACxByM,EAASzM,EA5FE,IA4F0B4M,EAA8B,GACvEH,EAASzM,GAAK,IAAO4M,EAA8B,MAEzDD,GAAa,EACbF,EAASzM,EAAIM,KAAKS,IAAI0L,EAASzM,EAAG,IAGpC4I,EAAWkE,YAAYH,GAAW,EAAMF,EAASzM,EACvD,CAGSwL,GAAaA,EAAUpG,cAAgBoG,EAAU5E,WAAW7F,KAC1D+B,KAAK8I,SAASO,aACnBrJ,KAAK8I,SAAShF,WAAWmG,gBAAe,IAMxCjK,KAAKkK,yBAAyB,KAC9BlK,KAAKkK,yBAAyB,KAEpC,GAEA,CAAAtP,IAAA,2BAAAC,MAIE,SAAyB8H,GAAM,IAAAwH,EAAA,KACrBR,EAAa3J,KAAK8I,SAAlBa,SACAjB,EAAc1I,KAAKkB,KAAnBwH,UAER,GAAKA,EAAL,CAIA,IAAQlE,EAAgBkE,EAAhBlE,IAAKU,EAAWwD,EAAXxD,OACPkF,EAAS5F,EAAI7B,GACb0H,EAAoBrK,KAAKkB,KAAKqI,UAAY,GAAc,MAAT5G,EAO/C2H,EAAoBF,EAlI9B,SAAiBG,EAAiBC,GAChC,OAAOD,EAAkBC,GAAoB,EAAIA,EACnD,CAgIuCC,CAAQd,EAAShH,GAH3B,MAKzB,GAAI0H,EAAkB,CACpB,IAAMK,EAAa1K,KAAKwJ,sBAAsBY,GACxCO,EAAsB3K,KAAKwJ,sBAAsBc,GAIvD,GAAKI,EAAa,GAAKC,GArJF,IAsJbD,EAAa,GAAKC,EAtJL,GAwJnB,YADA3K,KAAKkB,KAAK0J,OAGlB,CAGI,IAAMC,EAAuB3F,EAAOmD,WAAW1F,EAAM2H,GAIrD,GAAIF,IAAWS,EAAf,CAKA,IAAMC,EAAgBD,IAAyBP,EAAqB,EAAI,IAElES,EAAmB/K,KAAKkB,KAAKqI,UAC7ByB,EAAeH,EAAuBT,EAE5CpK,KAAKkB,KAAKiG,WAAW8D,YAAY,CAC/BrD,KAAM,aAAejF,EACrBgF,OAAO,EACPuD,MAAOd,EACPe,IAAKN,EACLlB,SAAUA,EAAShH,GACnBmI,aAAAA,EACAM,SAAU,SAACC,GAET,GAAIhB,GAAoBF,EAAKjJ,KAAKqI,UAAY,EAAG,CAE/C,IAAM+B,EAAyB,GAAKT,EAAuBQ,GAAOL,EAKlEb,EAAKjJ,KAAKuI,eAAe3L,EACvBiN,GAAoB,EAAIA,GAAoBO,EAC5C,EACA,GAEZ,CAEQ9G,EAAI7B,GAAQnF,KAAK+N,MAAMF,GACvB3C,EAAU7C,qBAClB,GAjCA,CAjCA,CAoEA,GAEA,CAAAjL,IAAA,uBAAAC,MAUE,SAAqB8H,GACnB,IAAA6I,EAA+CxL,KAAK8I,SAA5C9L,EAAEwO,EAAFxO,GAAImM,EAAQqC,EAARrC,SAAUD,EAAMsC,EAANtC,OAAQG,EAAYmC,EAAZnC,aAC9BoC,EAAkCzL,KAAKkB,KAA/BwH,EAAS+C,EAAT/C,UAAW5C,EAAU2F,EAAV3F,WACb4F,EAAS1O,EAAG2F,GAAQuG,EAAOvG,GAC3BgJ,EAAiB7F,EAAW5I,EAAIwO,EAEtC,IAAKA,IAAUhD,EACb,OAAO,EAIT,GAAa,MAAT/F,IAAiB+F,EAAUkD,eAAiBvC,EAE9C,OADAvD,EAAW+F,OAAOF,GAAgB,IAC3B,EAGT,IAAQzG,EAAWwD,EAAXxD,OACF4G,EAASpD,EAAUlE,IAAI7B,GAAQ+I,EAErC,GAAI1L,KAAKkB,KAAKD,QAAQ8K,gBACF,MAAb5C,GACS,MAATxG,IACC0G,EAAc,CACpB,IAAM2C,EAAuBlG,EAAWiE,gBAGlCkC,EAAsBnG,EAAW5I,EAAI8O,EAErCE,EAAgBR,EAAQ,EACxBS,GAAiBD,EAEvB,GAAIJ,EAAS5G,EAAOlH,IAAI2E,IAASuJ,EAAe,CAQ9C,GAF6BhH,EAAOlH,IAAI2E,IAAS3C,KAAK+I,SAASpG,GAI7D,OADAmD,EAAW+F,OAAOF,GAAgB,IAC3B,EAEP3L,KAAKsJ,oBAAoB3G,EAAMmJ,EAGzC,MAAa,GAAIA,EAAS5G,EAAOjH,IAAI0E,IAASwJ,EAAe,CAMrD,GAF6BnM,KAAK+I,SAASpG,IAASuC,EAAOjH,IAAI0E,GAI7D,OADAmD,EAAW+F,OAAOF,GAAgB,IAC3B,EAEP3L,KAAKsJ,oBAAoB3G,EAAMmJ,EAGzC,MAEQ,GAA4B,IAAxBG,EAA2B,CAE7B,GAAIA,EAAsB,EAExB,OADAnG,EAAW+F,OAAOrO,KAAKS,IAAI0N,EAAgBK,IAAuB,IAC3D,EACF,GAAIC,EAAsB,EAG/B,OADAnG,EAAW+F,OAAOrO,KAAKQ,IAAI2N,EAAgBK,IAAuB,IAC3D,CAEnB,MAEUhM,KAAKsJ,oBAAoB3G,EAAMmJ,EAGzC,KACmB,MAATnJ,IAEGmD,EAAWC,aAAeb,EAAOlH,IAAIb,IAAM+H,EAAOjH,IAAId,IAI3D6C,KAAKsJ,oBAAoB3G,EAAMmJ,GAInC,OAAO,CACX,GAKA,CAAAlR,IAAA,wBAAAC,MAWE,SAAsB0N,GAAM,IAAA6D,EAAAC,EAC1B,OAAQ9D,GAA4C,QAAxC6D,EAAuB,QAAvBC,EAAIrM,KAAKkB,KAAKwH,iBAAS,IAAA2D,OAAA,EAAnBA,EAAqBnH,OAAO3C,OAAOpF,SAAC,IAAAiP,EAAAA,EAAI,KAAOpM,KAAKkB,KAAKO,aAAatE,EAAI,EAC9F,GAEA,CAAAvC,IAAA,sBAAAC,MAUE,SAAoB8H,EAAM2J,EAAcC,GACtC,IAAQ7D,EAAc1I,KAAKkB,KAAnBwH,UAER,GAAKA,EAAL,CAIA,IAAQlE,EAAgBkE,EAAhBlE,IAGR,GAHwBkE,EAAXxD,OACemD,WAAW1F,EAAM2J,KAExBA,GAAgBC,EAAgB,CACnD,IAAMb,EAAQlO,KAAKC,MAAM6O,EAAe9H,EAAI7B,IAC5C6B,EAAI7B,IAAS+I,GAASa,GAxVH,IAyVzB,MACM/H,EAAI7B,GAAQ2J,CATlB,CAWA,KAAGzD,CAAA,CAtUc,GCVjB,SAAS2D,EAAoBjP,EAAGP,EAAIC,GAGlC,OAFAM,EAAEL,GAAKF,EAAGE,EAAID,EAAGC,GAAK,EACtBK,EAAEJ,GAAKH,EAAGG,EAAIF,EAAGE,GAAK,EACfI,CACT,CAAC,IAEKkP,EAAW,WAIf,SAAAA,EAAY3D,IAAU/I,EAAAA,EAAAA,GAAA,KAAA0M,GACpBzM,KAAK8I,SAAWA,EAKhB9I,KAAK0M,UAAY,CAAExP,EAAG,EAAGC,EAAG,GAK5B6C,KAAK2M,gBAAkB,CAAEzP,EAAG,EAAGC,EAAG,GAKlC6C,KAAK4M,WAAa,CAAE1P,EAAG,EAAGC,EAAG,GAE7B6C,KAAK6M,sBAAuB,EAE5B7M,KAAK8M,gBAAkB,CAC3B,CAqNG,OArNA5M,EAAAA,EAAAA,GAAAuM,EAAA,EAAA7R,IAAA,QAAAC,MAED,WACE,IAAQ6N,EAAc1I,KAAK8I,SAAS5H,KAA5BwH,UACJA,IACF1I,KAAK8M,gBAAkBpE,EAAUpG,cACjCvF,EAAeiD,KAAK0M,UAAWhE,EAAUlE,MAG3CxE,KAAK8I,SAAS5H,KAAKiG,WAAWC,aAC9BpH,KAAK6M,sBAAuB,CAChC,GAAG,CAAAjS,IAAA,SAAAC,MAED,WACE,IAAAkS,EAA2C/M,KAAK8I,SAAxC9L,EAAE+P,EAAF/P,GAAIgQ,EAAOD,EAAPC,QAAS/P,EAAE8P,EAAF9P,GAAIgQ,EAAOF,EAAPE,QAAS/L,EAAI6L,EAAJ7L,KAC1BwH,EAAcxH,EAAdwH,UAER,GAAKA,EAAL,CAIA,IAAMwE,EAAexE,EAAU5E,WAAW9F,IACpCmP,EAAezE,EAAU5E,WAAW7F,IAE1C,GAAKyK,EAAUxB,eAAgBhG,EAAK4E,WAAWC,YAA/C,CAIAyG,EAAoBxM,KAAK2M,gBAAiBK,EAASC,GACnDT,EAAoBxM,KAAK4M,WAAY5P,EAAIC,GAEzC,IAAIqF,EAAiB,EAAI5E,EAAmBsP,EAASC,GACjCvP,EAAmBV,EAAIC,GACvB+C,KAAK8M,gBAOzB,GAJIxK,EAAgBoG,EAAU5E,WAAWT,QAAWqF,EAAU5E,WAAWT,QAAU,KACjFrD,KAAK6M,sBAAuB,GAG1BvK,EAAgB4K,EAClB,GAAIhM,EAAKD,QAAQmM,eACTpN,KAAK6M,sBACN7M,KAAK8M,iBAAmBpE,EAAU5E,WAAWT,QAAS,CAE3D,IAAMkG,EAAY,GAAM2D,EAAe5K,IAAkB4K,EAAe,KACnEhM,EAAKuB,SAAS,aAAc,CAAE8G,UAAAA,IAAavD,kBAC9C9E,EAAKuI,eAAeF,EAE9B,MAEQjH,EAAgB4K,EA7FI,KA6FYA,EAAe5K,QAExCA,EAAgB6K,IAEzB7K,EAAgB6K,EAlGM,KAkGU7K,EAAgB6K,IAGlDzE,EAAUlE,IAAItH,EAAI8C,KAAKqN,0BAA0B,IAAK/K,GACtDoG,EAAUlE,IAAIrH,EAAI6C,KAAKqN,0BAA0B,IAAK/K,GAEtDoG,EAAUpB,aAAahF,GACvBoG,EAAU7C,qBApCd,CAPA,CA4CA,GAAG,CAAAjL,IAAA,MAAAC,MAED,WACE,IAAQqG,EAASlB,KAAK8I,SAAd5H,KACAwH,EAAcxH,EAAdwH,YACFA,GAAaA,EAAUpG,cAAgBoG,EAAU5E,WAAWT,WAC1DrD,KAAK6M,sBACN3L,EAAKD,QAAQmM,aAClBlM,EAAK0J,QAEL5K,KAAKiK,gBAEX,GAEA,CAAArP,IAAA,4BAAAC,MAME,SAA0B8H,EAAML,GAC9B,IAAM8F,EAAa9F,EAAgBtC,KAAK8M,gBACxC,OAAO9M,KAAK4M,WAAWjK,IACX3C,KAAK2M,gBAAgBhK,GAAQ3C,KAAK0M,UAAU/J,IAASyF,CACrE,GAEA,CAAAxN,IAAA,iBAAAC,MAQE,SAAeyS,GACb,IAAQpM,EAASlB,KAAK8I,SAAd5H,KACAwH,EAAcxH,EAAdwH,UAER,GAAc,OAATA,QAAS,IAATA,GAAAA,EAAWxB,aAAhB,CAI0B,IAAtBlH,KAAK4M,WAAW1P,IAClBoQ,GAAgB,GAGlB,IAGIC,EAHElG,EAAgBqB,EAAUpG,cAI5BkL,GAA2B,EAE3BnG,EAAgBqB,EAAU5E,WAAWT,QACvCkK,EAAuB7E,EAAU5E,WAAWT,QAEnCgE,EAAgBqB,EAAU5E,WAAW7F,IAC9CsP,EAAuB7E,EAAU5E,WAAW7F,KAG5CuP,GAA2B,EAC3BD,EAAuBlG,GAGzB,IAAM0D,EAAmB7J,EAAKqI,UACxBc,EAAmBnJ,EAAKqI,UAAY,EAEpCkE,EAAa1Q,EAAe,CAAEG,EAAG,EAAGC,EAAG,GAAKuL,EAAUlE,KACxDkJ,EAAiB3Q,EAAe,CAAEG,EAAG,EAAGC,EAAG,GAAKsQ,GAEhDH,IACFtN,KAAK4M,WAAW1P,EAAI,EACpB8C,KAAK4M,WAAWzP,EAAI,EACpB6C,KAAK2M,gBAAgBzP,EAAI,EACzB8C,KAAK2M,gBAAgBxP,EAAI,EACzB6C,KAAK8M,gBAAkBzF,EACvBtK,EAAeiD,KAAK0M,UAAWe,IAG7BD,IACFE,EAAiB,CACfxQ,EAAG8C,KAAKqN,0BAA0B,IAAKE,GACvCpQ,EAAG6C,KAAKqN,0BAA0B,IAAKE,KAK3C7E,EAAUpB,aAAaiG,GAEvBG,EAAiB,CACfxQ,EAAGwL,EAAUxD,OAAOmD,WAAW,IAAKqF,EAAexQ,GACnDC,EAAGuL,EAAUxD,OAAOmD,WAAW,IAAKqF,EAAevQ,IAIrDuL,EAAUpB,aAAaD,GAEvB,IAAMsG,GAAkB9P,EAAY6P,EAAgBD,GAEpD,IAAKE,IAAmBH,IAA6BnD,EAMnD,OAJA3B,EAAUjB,eAAe8F,QACzB7E,EAAU7C,sBAMZ3E,EAAKiG,WAAWC,aAEhBlG,EAAKiG,WAAW8D,YAAY,CAC1BtD,OAAO,EACPuD,MAAO,EACPC,IAAK,IACLxB,SAAU,EACVmB,aAAc,EACd8C,iBAAkB,GAClBxC,SAAU,SAACyC,GAGT,GAFAA,GAAO,IAEHF,GAAkBH,EAA0B,CAM9C,GALIG,IACFjF,EAAUlE,IAAItH,EAAIuQ,EAAWvQ,GAAKwQ,EAAexQ,EAAIuQ,EAAWvQ,GAAK2Q,EACrEnF,EAAUlE,IAAIrH,EAAIsQ,EAAWtQ,GAAKuQ,EAAevQ,EAAIsQ,EAAWtQ,GAAK0Q,GAGnEL,EAA0B,CAC5B,IAAMM,EAAezG,GACNkG,EAAuBlG,GAAiBwG,EACvDnF,EAAUpB,aAAawG,EACnC,CAEUpF,EAAU7C,qBACpB,CAGYwE,GAAoBnJ,EAAKqI,UAAY,GAIvCrI,EAAKuI,eAAe3L,EAClBiN,GAAoB,EAAIA,GAAoB8C,EAAK,EAAG,GAGhE,EACM/F,WAAY,WAEVY,EAAUjB,eAAe8F,GACzB7E,EAAU7C,qBAClB,GA5GA,CA8GA,KAAG4G,CAAA,CA9Oc,GCRjB,SAASsB,EAAoBC,GAC3B,QAAsCA,EAAMhS,OAAQiS,QAAQ,mBAC9D,CAEA,IAGMC,EAAU,WAId,SAAAA,EAAYpF,IAAU/I,EAAAA,EAAAA,GAAA,KAAAmO,GACpBlO,KAAK8I,SAAWA,CACpB,CAuFG,OArFH5I,EAAAA,EAAAA,GAAAgO,EAAA,EAAAtT,IAAA,QAAAC,MAIE,SAAMqN,EAAOiG,GACX,IAAMC,EAA8CD,EAAcnS,OAAQqS,UACpEC,EAAeF,EAAgBG,SAAS,aACxCC,EAAoBJ,EAAgBG,SAAS,eACtBH,EAAgBG,SAAS,mBAElDD,EACFtO,KAAKyO,oBAAoB,aAAcvG,EAAOiG,GACrCK,GACTxO,KAAKyO,oBAAoB,UAAWvG,EAAOiG,EAEjD,GAEA,CAAAvT,IAAA,MAAAC,MAIE,SAAIqN,EAAOiG,GACLJ,EAAoBI,IACtBnO,KAAKyO,oBAAoB,MAAOvG,EAAOiG,EAE7C,GAEA,CAAAvT,IAAA,YAAAC,MAIE,SAAUqN,EAAOiG,GACXJ,EAAoBI,IACtBnO,KAAKyO,oBAAoB,YAAavG,EAAOiG,EAEnD,GAEA,CAAAvT,IAAA,sBAAAC,MAME,SAAoB6T,EAAYxG,EAAOiG,GAAe,IAAAQ,EAC5CzN,EAASlB,KAAK8I,SAAd5H,KACAwH,EAAcxH,EAAdwH,UACFkG,EAA+DF,EAAa,SAC5ExK,EAAchD,EAAKD,QAAQ2N,GAEjC,IAAI1N,EAAKuB,SAASmM,EAAgB,CAAE1G,MAAAA,EAAOiG,cAAAA,IAAiBnI,iBAI5D,GAA2B,oBAAhB9B,EAKX,OAAQA,GACN,IAAK,QACL,IAAK,OACHhD,EAAKgD,KACL,MACF,IAAK,OACM,OAATwE,QAAS,IAATA,GAAAA,EAAWmG,WAAW3G,GACtB,MACF,IAAK,gBAGU,OAATQ,QAAS,IAATA,GAAAA,EAAWxB,cACRwB,EAAU5E,WAAWR,YAAcoF,EAAU5E,WAAWT,QAC7DqF,EAAUmG,WAAW3G,GACZhH,EAAKD,QAAQ6N,yBACtB5N,EAAK0J,QAEP,MACF,IAAK,kBACuB,QAA1B+D,EAAA3O,KAAK8I,SAAS5H,KAAK0F,eAAO,IAAA+H,GAA1BA,EAA4BN,UAAUU,OAAO,yBAvB/C7K,EAAY8K,KAAK9N,EAAMgH,EAAOiG,EA+BpC,KAAGD,CAAA,CA7Fa,GCEVe,EAAQ,WAIZ,SAAAA,EAAY/N,GAAM,IAAAgO,EAAA,MAAAnP,EAAAA,EAAAA,GAAA,KAAAkP,GAChBjP,KAAKkB,KAAOA,EAGZlB,KAAKmJ,SAAW,KAKhBnJ,KAAKhD,GAAK,CAAEE,EAAG,EAAGC,EAAG,GAErB6C,KAAK/C,GAAK,CAAEC,EAAG,EAAGC,EAAG,GAErB6C,KAAKkJ,OAAS,CAAEhM,EAAG,EAAGC,EAAG,GAEzB6C,KAAKmP,OAAS,CAAEjS,EAAG,EAAGC,EAAG,GAEzB6C,KAAKgN,QAAU,CAAE9P,EAAG,EAAGC,EAAG,GAE1B6C,KAAKiN,QAAU,CAAE/P,EAAG,EAAGC,EAAG,GAE1B6C,KAAK2J,SAAW,CAAEzM,EAAG,EAAGC,EAAG,GAK3B6C,KAAKoP,aAAe,CAAElS,EAAG,EAAGC,EAAG,GAI/B6C,KAAKqP,YAAc,CAAEnS,EAAG,EAAGC,EAAG,GAE9B6C,KAAKsP,iBAAmB,EAIxBtP,KAAKuP,iBAAmB,GAExBvP,KAAKwP,mBAAqB,iBAAkB9P,OAE5CM,KAAKyP,uBAA0B/P,OAAOgQ,aACtC1P,KAAK2P,cAAgB3P,KAAKwP,oBACAxP,KAAKyP,sBAAwBnQ,UAAUsQ,eAAiB,EAElF5P,KAAKsP,iBAAmB,EAExBtP,KAAK6P,cAAgB,EAErB7P,KAAK8P,qBAAsB,EAC3B9P,KAAKqJ,cAAe,EACpBrJ,KAAK+P,YAAa,EAClB/P,KAAKgQ,WAAY,EAEjBhQ,KAAKiQ,IAAM,KAIXjQ,KAAKkQ,UAAY,KAEZlQ,KAAK2P,gBAERzO,EAAKD,QAAQ8K,gBAAiB,GAGhC/L,KAAKmQ,KAAO,IAAItH,EAAY7I,MAC5BA,KAAK8D,WAAa,IAAI2I,EAAYzM,MAClCA,KAAKoQ,WAAa,IAAIlC,EAAWlO,MAEjCkB,EAAKmP,GAAG,cAAc,WACpBnP,EAAKoP,OAAOC,IACVrP,EAAKsP,WACL,QAC2BtB,EAAKuB,SAASC,KAAKxB,IAG5CA,EAAKO,qBACPP,EAAKyB,YAAY,UAAW,OAAQ,KAAM,UACjCzB,EAAKM,oBACdN,EAAKyB,YAAY,QAAS,QAAS,MAAO,UAUtCzP,EAAKsP,aACPtP,EAAKsP,WAAWI,YAAc,WAAO,EACrC1P,EAAKsP,WAAWK,WAAa,WAAO,IAGtC3B,EAAKyB,YAAY,QAAS,OAAQ,KAE1C,GACA,CAkeG,OAheHzQ,EAAAA,EAAAA,GAAA+O,EAAA,EAAArU,IAAA,cAAAC,MAOE,SAAYiW,EAAMC,EAAMC,EAAIC,GAC1B,IAAQ/P,EAASlB,KAATkB,KACAoP,EAAWpP,EAAXoP,OAEFY,EAAcD,EAASH,EAAOG,EAAS,GAE7CX,EAAOC,IACLrP,EAAKsP,WACLM,EAAOC,EACoB/Q,KAAKmR,cAAcT,KAAK1Q,OAErDsQ,EAAOC,IAAI7Q,OAAQoR,EAAO,OAAmC9Q,KAAKoR,cAAcV,KAAK1Q,OACrFsQ,EAAOC,IAAI7Q,OAAQoR,EAAOE,EAA+BhR,KAAKqR,YAAYX,KAAK1Q,OAC3EkR,GACFZ,EAAOC,IACLrP,EAAKsP,WACLU,EAC2BlR,KAAKqR,YAAYX,KAAK1Q,MAGzD,GAEA,CAAApF,IAAA,gBAAAC,MAGE,SAAcgF,GAOZ,IAAMyR,EAA4B,cAAXzR,EAAEM,MAA0C,UAAlBN,EAAE0R,YAKnD,KAAID,GAAkBzR,EAAE2R,OAAS,GAAjC,CAIA,IAAQtQ,EAASlB,KAATkB,KAGHA,EAAKwD,OAAOC,OAKbzD,EAAKuB,SAAS,cAAe,CAAE0L,cAAetO,IAAKmG,mBAInDsL,IACFpQ,EAAKuQ,gBAILzR,KAAK0R,8BAA8B7R,IAGrCqB,EAAKiG,WAAW6B,UAEhBhJ,KAAK2R,cAAc9R,EAAG,QAEQ,IAA1BG,KAAKsP,mBACPtP,KAAKmJ,SAAW,KAGhBpM,EAAeiD,KAAKgN,QAAShN,KAAKhD,KAGhCgD,KAAKsP,iBAAmB,GAE1BtP,KAAK4R,iBACL5R,KAAKqJ,cAAe,GAEpBrJ,KAAKqJ,cAAe,GAhCpBxJ,EAAEgS,gBANR,CAwCA,GAEA,CAAAjX,IAAA,gBAAAC,MAGE,SAAcgF,GACZA,EAAEgS,iBAEG7R,KAAKsP,mBAIVtP,KAAK2R,cAAc9R,EAAG,QAElBG,KAAKkB,KAAKuB,SAAS,cAAe,CAAE0L,cAAetO,IAAKmG,mBAI9B,IAA1BhG,KAAKsP,kBAA2BtP,KAAK+P,WA4B9B/P,KAAKsP,iBAAmB,IAAMtP,KAAKgQ,YAC5ChQ,KAAK8R,cAEL9R,KAAKgQ,WAAY,EAGjBhQ,KAAK+R,qBAEL/R,KAAK8D,WAAWoH,QAEhBlL,KAAKgS,eACLhS,KAAKiS,mBAtCAjS,KAAKmJ,UACRnJ,KAAKkS,0BAIHlS,KAAKmJ,WAAanJ,KAAK+P,aACrB/P,KAAKgQ,YACPhQ,KAAKgQ,WAAY,EACjBhQ,KAAK8D,WAAWqH,OAGlBnL,KAAK+P,YAAa,EAClB/P,KAAK4R,iBAGL5R,KAAK+R,qBACL/R,KAAK6P,cAAgBsC,KAAKtE,MAE1B7N,KAAK8P,qBAAsB,EAC3B/S,EAAeiD,KAAKqP,YAAarP,KAAKhD,IACtCgD,KAAK2J,SAASzM,EAAI,EAClB8C,KAAK2J,SAASxM,EAAI,EAClB6C,KAAKmQ,KAAKjF,QAEVlL,KAAKgS,eACLhS,KAAKiS,oBAeb,GAEA,CAAArX,IAAA,cAAAC,MAGE,WACMmF,KAAK+P,aACP/P,KAAK+P,YAAa,EAIb/P,KAAK8P,qBACR9P,KAAKoS,iBAAgB,GAGvBpS,KAAKmQ,KAAKhF,MACVnL,KAAKmJ,SAAW,KAEtB,GAEA,CAAAvO,IAAA,cAAAC,MAGE,SAAYgF,GACLG,KAAKsP,mBAIVtP,KAAK2R,cAAc9R,EAAG,MAElBG,KAAKkB,KAAKuB,SAAS,YAAa,CAAE0L,cAAetO,IAAKmG,mBAI5B,IAA1BhG,KAAKsP,mBACPtP,KAAKgS,eAEDhS,KAAK+P,WACP/P,KAAK8R,cACK9R,KAAKgQ,WAAchQ,KAAKqJ,cAElCrJ,KAAKqS,WAAWxS,IAIhBG,KAAKsP,iBAAmB,GAAKtP,KAAKgQ,YACpChQ,KAAKgQ,WAAY,EACjBhQ,KAAK8D,WAAWqH,MAEc,IAA1BnL,KAAKsP,mBAEPtP,KAAKmJ,SAAW,KAChBnJ,KAAK+R,wBAGb,GAEA,CAAAnX,IAAA,iBAAAC,MAGE,YACMmF,KAAK+P,YAAc/P,KAAKgQ,aAC1BhQ,KAAKoS,kBAEDpS,KAAK+P,WAEFlS,EAAYmC,KAAKhD,GAAIgD,KAAKkJ,SAC7BlJ,KAAKmQ,KAAKmC,SAGPzU,EAAYmC,KAAKhD,GAAIgD,KAAKkJ,SACvBrL,EAAYmC,KAAK/C,GAAI+C,KAAKmP,SAChCnP,KAAK8D,WAAWwO,SAIpBtS,KAAKuS,oBACLvS,KAAKiQ,IAAMuC,sBAAsBxS,KAAKiS,eAAevB,KAAK1Q,OAEhE,GAEA,CAAApF,IAAA,kBAAAC,MAME,SAAgByL,GACd,IAAMmM,EAAON,KAAKtE,MACZjP,EAAW6T,EAAOzS,KAAK6P,cAEzBjR,EAAW,KAAO0H,IAKtBtG,KAAK2J,SAASzM,EAAI8C,KAAK0S,aAAa,IAAK9T,GACzCoB,KAAK2J,SAASxM,EAAI6C,KAAK0S,aAAa,IAAK9T,GAEzCoB,KAAK6P,cAAgB4C,EACrB1V,EAAeiD,KAAKqP,YAAarP,KAAKhD,IACtCgD,KAAK8P,qBAAsB,EAC/B,GAEA,CAAAlV,IAAA,aAAAC,MAIE,SAAWgF,GAAG,IAAA8S,EAAA,KACJ7M,EAAe9F,KAAKkB,KAApB4E,WAGR,GAAIA,EAAWC,YAGbD,EAAWkE,YAAY,GAAG,QAK5B,KAAInK,EAAEM,KAAKyS,QAAQ,UAAY,GAK/B,GAAe,YAAX/S,EAAEM,MAAwC,UAAlBN,EAAE0R,YAA9B,CAMA,IAAMsB,EAAW7S,KAAKkB,KAAKD,QAAQ6R,gBApYd,IAoYmD,EAKpE9S,KAAKkQ,WACPlQ,KAAK4R,iBAEDlU,EAAmBsC,KAAKoP,aAAcpP,KAAKgN,SA3Y5B,IA4YjBhN,KAAKoQ,WAAW2C,UAAU/S,KAAKgN,QAASnN,KAG1C9C,EAAeiD,KAAKoP,aAAcpP,KAAKgN,SACvChN,KAAKkQ,UAAY8C,YAAW,WAC1BL,EAAKvC,WAAW6C,IAAIN,EAAK3F,QAASnN,GAClC8S,EAAKf,gBACb,GAASiB,GAnBT,MAFM7S,KAAKoQ,WAAW8C,MAAMlT,KAAKgN,QAASnN,EAuB1C,GAEA,CAAAjF,IAAA,iBAAAC,MAGE,WACMmF,KAAKkQ,YACPiD,aAAanT,KAAKkQ,WAClBlQ,KAAKkQ,UAAY,KAEvB,GAEA,CAAAtV,IAAA,eAAAC,MAQE,SAAa8H,EAAM/D,GAEjB,IAAMwU,EAAepT,KAAKhD,GAAG2F,GAAQ3C,KAAKqP,YAAY1M,GAEtD,OAAInF,KAAKG,IAAIyV,GAAgB,GAAKxU,EAAW,EACpCwU,EAAexU,EAGjB,CACX,GAEA,CAAAhE,IAAA,eAAAC,MAGE,WACMmF,KAAKiQ,MACPoD,qBAAqBrT,KAAKiQ,KAC1BjQ,KAAKiQ,IAAM,KAEjB,GAEA,CAAArV,IAAA,gCAAAC,MAIE,SAA8BgF,GAG5BA,EAAEgS,gBACN,GAEA,CAAAjX,IAAA,gBAAAC,MAQE,SAAcgF,EAAG0R,GACf,GAAIvR,KAAKyP,qBAAsB,CAC7B,IAAM6D,EAA4CzT,EAE5C0T,EAAevT,KAAKuP,iBAAiBiE,WAAU,SAACC,GACpD,OAAOA,EAAepW,KAAOiW,EAAaI,SAClD,IAE0B,OAAhBnC,GAAwBgC,GAAgB,EAE1CvT,KAAKuP,iBAAiBoE,OAAOJ,EAAc,GAClB,SAAhBhC,IAA4C,IAAlBgC,EAEnCvT,KAAKuP,iBAAiB1T,KAAKmE,KAAK4T,wBAAwBN,EAAc,CAAEpW,EAAG,EAAGC,EAAG,KACxEoW,GAAgB,GAEzBvT,KAAK4T,wBAAwBN,EAActT,KAAKuP,iBAAiBgE,IAGnEvT,KAAKsP,iBAAmBtP,KAAKuP,iBAAiBpT,OAI1C6D,KAAKsP,iBAAmB,GAC1BvS,EAAeiD,KAAKhD,GAAIgD,KAAKuP,iBAAiB,IAG5CvP,KAAKsP,iBAAmB,GAC1BvS,EAAeiD,KAAK/C,GAAI+C,KAAKuP,iBAAiB,GAEtD,KAAW,CACL,IAAMsE,EAAwChU,EAE9CG,KAAKsP,iBAAmB,EACpBuE,EAAW1T,KAAKyS,QAAQ,UAAY,EAGlCiB,EAAWC,SAAWD,EAAWC,QAAQ3X,OAAS,IACpD6D,KAAK4T,wBAAwBC,EAAWC,QAAQ,GAAI9T,KAAKhD,IACzDgD,KAAKsP,mBACDuE,EAAWC,QAAQ3X,OAAS,IAC9B6D,KAAK4T,wBAAwBC,EAAWC,QAAQ,GAAI9T,KAAK/C,IACzD+C,KAAKsP,sBAKTtP,KAAK4T,wBAAqD/T,EAAIG,KAAKhD,IAC/C,OAAhBuU,EAEFvR,KAAKsP,iBAAmB,EAExBtP,KAAKsP,mBAGf,CACA,GAEA,CAAA1U,IAAA,oBAAAC,MAGE,WACEkC,EAAeiD,KAAKkJ,OAAQlJ,KAAKhD,IACjCD,EAAeiD,KAAKmP,OAAQnP,KAAK/C,GACrC,GAEA,CAAArC,IAAA,qBAAAC,MAGE,WACEkC,EAAeiD,KAAKgN,QAAShN,KAAKhD,IAClCD,EAAeiD,KAAKiN,QAASjN,KAAK/C,IAClC+C,KAAKuS,mBACT,GAEA,CAAA3X,IAAA,0BAAAC,MACE,WACE,GAAImF,KAAKkB,KAAK4E,WAAWC,YAEvB/F,KAAKmJ,SAAW,QACX,CAEL,IAAM4K,EAAOvW,KAAKG,IAAIqC,KAAKhD,GAAGE,EAAI8C,KAAKgN,QAAQ9P,GAAKM,KAAKG,IAAIqC,KAAKhD,GAAGG,EAAI6C,KAAKgN,QAAQ7P,GAEtF,GAAa,IAAT4W,EAAY,CAEd,IAAMC,EAAcD,EAAO,EAAI,IAAM,IAEjCvW,KAAKG,IAAIqC,KAAKhD,GAAGgX,GAAehU,KAAKgN,QAAQgH,KA5iB3B,KA6iBpBhU,KAAKmJ,SAAW6K,EAE1B,CACA,CACA,GAEA,CAAApZ,IAAA,0BAAAC,MASE,SAAwBgF,EAAGtC,GAUzB,OATAA,EAAEL,EAAI2C,EAAEoU,MAAQjU,KAAKkB,KAAKgT,OAAOhX,EACjCK,EAAEJ,EAAI0C,EAAEsU,MAAQnU,KAAKkB,KAAKgT,OAAO/W,EAE7B,cAAe0C,EACjBtC,EAAEF,GAAKwC,EAAE6T,eACiBtW,IAAjByC,EAAEuU,aACX7W,EAAEF,GAAKwC,EAAEuU,YAGJ7W,CACX,GAEA,CAAA3C,IAAA,WAAAC,MAIE,SAASgF,GAEHG,KAAKkB,KAAK4E,WAAWC,cACvBlG,EAAEgS,iBACFhS,EAAEwU,kBAER,KAAGpF,CAAA,CAtkBW,GCHRqF,EAAU,WAId,SAAAA,EAAYpT,IAAMnB,EAAAA,EAAAA,GAAA,KAAAuU,GAChBtU,KAAKkB,KAAOA,EACZlB,KAAK9C,EAAI,EACT8C,KAAKuU,WAAa,EAElBvU,KAAKwU,mBAAqB,EAE1BxU,KAAKyU,mBAAqB,EAE1BzU,KAAK0U,sBAAwB,EAG7B1U,KAAK2U,YAAc,EACvB,CAwSG,OAtSHzU,EAAAA,EAAAA,GAAAoU,EAAA,EAAA1Z,IAAA,SAAAC,MAME,SAAO+Z,GAAc,IAAAC,EAAA,KACX3T,EAASlB,KAATkB,KACF4T,EAAgBtX,KAAKC,MACzByD,EAAKO,aAAavE,EAAIgE,EAAKO,aAAavE,EAAIgE,EAAKD,QAAQ8T,SAKrDC,EAAqBF,IAAkB9U,KAAKuU,WAE9CS,IACFhV,KAAKuU,WAAaO,EAClB9U,KAAK6L,OAAO7L,KAAK+J,kBAGnB/J,KAAK2U,YAAYtY,SAAQ,SAAC4Y,EAAYtT,GAChCqT,GACF1W,EAAa2W,EAAWrY,IAAK+E,EAAQkT,EAAKH,sBACZG,EAAKN,YAGjCK,GAAgBK,EAAW5S,OAC7B4S,EAAW5S,MAAM6S,QAEzB,GACA,GAEA,CAAAta,IAAA,gBAAAC,MAGE,WAGEmF,KAAKwU,mBAAqB,EAC1BxU,KAAKyU,mBAAqB,EAG1BzU,KAAKuU,WAAa,EAGlBvU,KAAK0U,sBAAwB,CACjC,GAEA,CAAA9Z,IAAA,gBAAAC,MAIE,WACEmF,KAAK2U,YAAc,GAInB,IAAK,IAAI1Y,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMW,EAAKJ,EAAc,aAAc,MAAOwD,KAAKkB,KAAK6D,WACxDnI,EAAGuY,aAAa,OAAQ,SACxBvY,EAAGuY,aAAa,uBAAwB,SACxCvY,EAAGuY,aAAa,cAAe,QAG/BvY,EAAG2B,MAAM6W,QAAiB,IAANnZ,EAAW,QAAU,OAEzC+D,KAAK2U,YAAY9Y,KAAK,CACpBe,GAAAA,GAGR,CACA,GAEA,CAAAhC,IAAA,cAAAC,MAIE,WACE,OAAOmF,KAAKkB,KAAKmU,cAAgB,CACrC,GAEA,CAAAza,IAAA,cAAAC,MAeE,SAAYkZ,EAAMuB,EAASC,GAAW,IAAAC,EAAA,KAC5BtU,EAASlB,KAATkB,KACJuU,EAAWvU,EAAKwU,eAAiB3B,EAC/B4B,EAAYzU,EAAKmU,cAEvB,GAAInU,EAAK0U,UAAW,CAClBH,EAAWvU,EAAK2U,eAAeJ,GAC/B,IAAMK,GAAY/B,EAAO4B,GAAaA,EAGpC5B,EAFE+B,GAAYH,EAAY,EAEnBG,EAGAA,EAAWH,CAE1B,MACUF,EAAW,EACbA,EAAW,EACFA,GAAYE,IACrBF,EAAWE,EAAY,GAEzB5B,EAAO0B,EAAWvU,EAAKwU,eAGzBxU,EAAKwU,eAAiBD,EACtBzV,KAAKwU,oBAAsBT,EAE3B7S,EAAKiG,WAAW4O,iBAEhB,IAAMC,EAAehW,KAAK+J,gBAC1B,GAAKuL,EAGE,CACLpU,EAAKiG,WAAW8D,YAAY,CAC1BgL,cAAc,EACd/K,MAAOlL,KAAK9C,EACZiO,IAAK6K,EACLrM,SAAU4L,GAAa,EACvB3H,iBAAkB,GAClB9C,aAAc,EACdM,SAAU,SAAClO,GACTsY,EAAK3J,OAAO3O,EACtB,EACQ4K,WAAY,WACV0N,EAAKU,iBACLhV,EAAKyE,aACf,IAGM,IAAIwQ,EAAWjV,EAAKwU,eAAiBxU,EAAKoD,UAC1C,GAAIpD,EAAK0U,UAAW,CAClB,IAAMQ,GAAgBD,EAAWR,GAAaA,EAG5CQ,EAFEC,GAAgBT,EAAY,EAEnBS,EAGAA,EAAeT,CAEpC,CAIUnY,KAAKG,IAAIwY,GAAY,GACvBnW,KAAKkW,gBAEb,MApCMlW,KAAK6L,OAAOmK,GACZhW,KAAKkW,iBAqCP,OAAO1N,QAAQuL,EACnB,GAEA,CAAAnZ,IAAA,gBAAAC,MAKE,WACE,OAAOmF,KAAKuU,WAAavU,KAAKwU,kBAClC,GAEA,CAAA5Z,IAAA,YAAAC,MAKE,WACE,OAAOmF,KAAK9C,IAAM8C,KAAK+J,eAC3B,GAEA,CAAAnP,IAAA,iBAAAC,MAGE,WAAiB,IAAAwb,EACPnV,EAASlB,KAATkB,KACFoV,EAAqBtW,KAAKyU,mBAAqBzU,KAAKwU,mBAE1D,GAAK8B,EAAL,CAIAtW,KAAKyU,mBAAqBzU,KAAKwU,mBAE/BtT,EAAKoD,UAAYpD,EAAKwU,eAEtB,IAEIa,EAFAC,EAAUhZ,KAAKG,IAAI2Y,GAInBE,GAAW,IACbxW,KAAK0U,sBAAwB4B,GAAsBA,EAAqB,GAAK,EAAI,GACjFE,EAAU,GAGZ,IAAK,IAAIva,EAAI,EAAGA,EAAIua,EAASva,IACvBqa,EAAqB,GACvBC,EAAavW,KAAK2U,YAAY8B,WAE5BzW,KAAK2U,YAAY,GAAK4B,EAEtBvW,KAAK0U,uBAELpW,EAAaiY,EAAW3Z,IAAKoD,KAAK0U,qBAAuB,GAAK1U,KAAKuU,YAEnErT,EAAKwV,WAAWH,EAAarV,EAAKoD,UAAYkS,EAAWva,EAAI,KAG/Dsa,EAAavW,KAAK2U,YAAYgC,SAE5B3W,KAAK2U,YAAYiC,QAAQL,GAEzBvW,KAAK0U,uBAELpW,EAAaiY,EAAW3Z,GAAIoD,KAAK0U,qBAAuB1U,KAAKuU,YAE7DrT,EAAKwV,WAAWH,EAAarV,EAAKoD,UAAYkS,EAAWva,EAAI,IAW/DuB,KAAKG,IAAIqC,KAAK0U,sBAAwB,KAAO1U,KAAK+F,cACpD/F,KAAK6W,gBACL7W,KAAKkV,UAIPhU,EAAKiG,WAAWC,aAEhBpH,KAAK2U,YAAYtY,SAAQ,SAAC4Y,EAAYhZ,GAChCgZ,EAAW5S,OAEb4S,EAAW5S,MAAMyU,YAAkB,IAAN7a,EAErC,IAEIiF,EAAKwH,UAA+B,QAAtB2N,EAAGrW,KAAK2U,YAAY,UAAE,IAAA0B,OAAA,EAAnBA,EAAqBhU,MACtCnB,EAAK2D,cAAckS,WAAWT,GAE1BpV,EAAKwH,WACPxH,EAAKwH,UAAU7C,sBAGjB3E,EAAKuB,SAAS,SArElB,CAsEA,GAEA,CAAA7H,IAAA,SAAAC,MAME,SAAOqC,EAAG8Z,GACR,IAAKhX,KAAKkB,KAAK0U,WAAaoB,EAAU,CAEpC,IAAIC,GAAwBjX,KAAKuU,WAAavU,KAAKwU,mBAAsBtX,GAAK8C,KAAKuU,WACnF0C,GAAuBjX,KAAKkB,KAAKoD,UACjC,IAAMoH,EAAQlO,KAAKC,MAAMP,EAAI8C,KAAK9C,IAE7B+Z,EAAsB,GAAKvL,EAAQ,GAChCuL,GAAuBjX,KAAKkB,KAAKmU,cAAgB,GAAK3J,EAAQ,KACpExO,EAAI8C,KAAK9C,EA3TgB,IA2TXwO,EAEtB,CAEI1L,KAAK9C,EAAIA,EAEL8C,KAAKkB,KAAK6D,WACZzG,EAAa0B,KAAKkB,KAAK6D,UAAW7H,GAGpC8C,KAAKkB,KAAKuB,SAAS,iBAAkB,CAAEvF,EAAAA,EAAG8Z,SAAkB,OAARA,QAAQ,IAARA,GAAAA,GACxD,KAAG1C,CAAA,CAzTa,GCdV4C,EAAsB,CAC1BC,OAAQ,GACRC,EAAG,GACHC,UAAW,GACXC,QAAS,GACTC,WAAY,GACZC,UAAW,GACXC,IAAK,GASDC,EAAsB,SAAC9c,EAAK+c,GAChC,OAAOA,EAAiB/c,EAAMsc,EAAoBtc,EACpD,EAMMgd,EAAQ,WAIZ,SAAAA,EAAY1W,GAAM,IAAA2W,EAAA,MAAA9X,EAAAA,EAAAA,GAAA,KAAA6X,GAChB5X,KAAKkB,KAAOA,EAEZlB,KAAK8X,aAAc,EAEnB5W,EAAKmP,GAAG,cAAc,WAEfnP,EAAKD,QAAQ8W,mBAIhBF,EAAKG,aAGP9W,EAAKoP,OAAOC,IAAI1T,SAAU,UAAsCgb,EAAKI,WAAWvH,KAAKmH,IACrF3W,EAAKoP,OAAOC,IAAI1T,SAAU,UAAsCgb,EAAKK,WAAWxH,KAAKmH,GAC3F,IAEI,IAAMM,EAAgDtb,SAASub,cAC/DlX,EAAKmP,GAAG,WAAW,WACbnP,EAAKD,QAAQoX,aACVF,GACAN,EAAKC,aACVK,EAAkBG,OAE1B,GACA,CA2GG,OAzGHpY,EAAAA,EAAAA,GAAA0X,EAAA,EAAAhd,IAAA,aAAAC,MACE,YACOmF,KAAK8X,aAAe9X,KAAKkB,KAAK0F,UACjC5G,KAAKkB,KAAK0F,QAAQ0R,QAClBtY,KAAK8X,aAAc,EAEzB,GAEA,CAAAld,IAAA,aAAAC,MAIE,SAAWgF,GACT,IAAQqB,EAASlB,KAATkB,KAER,IAAIA,EAAKuB,SAAS,UAAW,CAAE0L,cAAetO,IAAKmG,mBXsGhD,SAAwBnG,GAC7B,MAAQ,WAAYA,GAAkB,IAAbA,EAAE2R,QAAiB3R,EAAE0Y,SAAW1Y,EAAE2Y,SAAW3Y,EAAE4Y,QAAU5Y,EAAE6Y,QACtF,CWpGQC,CAAe9Y,GAAnB,CAQA,IAAI+Y,EAEAjW,EACAkW,GAAY,EACVlB,EAAiB,QAAS9X,EAEhC,OAAQ8X,EAAiB9X,EAAEjF,IAAMiF,EAAEiZ,SACjC,KAAKpB,EAAoB,SAAUC,GAC7BzW,EAAKD,QAAQ8X,SACfH,EAAgB,SAElB,MACF,KAAKlB,EAAoB,IAAKC,GAC5BiB,EAAgB,aAChB,MACF,KAAKlB,EAAoB,YAAaC,GACpChV,EAAO,IACP,MACF,KAAK+U,EAAoB,UAAWC,GAClChV,EAAO,IACP,MACF,KAAK+U,EAAoB,aAAcC,GACrChV,EAAO,IACPkW,GAAY,EACZ,MACF,KAAKnB,EAAoB,YAAaC,GACpCkB,GAAY,EACZlW,EAAO,IACP,MACF,KAAK+U,EAAoB,MAAOC,GAC9B3X,KAAKgY,aAMT,GAAIrV,EAAM,CAER9C,EAAEgS,iBAEF,IAAQnJ,EAAcxH,EAAdwH,UAEJxH,EAAKD,QAAQ+X,WACD,MAATrW,GACAzB,EAAKmU,cAAgB,EAC1BuD,EAAgBC,EAAY,OAAS,OAC5BnQ,GAAaA,EAAUpG,cAAgBoG,EAAU5E,WAAWZ,MAKrEwF,EAAUlE,IAAI7B,IAASkW,GAAa,GAAK,GACzCnQ,EAAUrC,MAAMqC,EAAUlE,IAAItH,EAAGwL,EAAUlE,IAAIrH,GAEvD,CAEQyb,IACF/Y,EAAEgS,iBAEF3Q,EAAK0X,KA9DX,CAgEA,GAEA,CAAAhe,IAAA,aAAAC,MAME,SAAWgF,GACT,IAAQoZ,EAAajZ,KAAKkB,KAAlB+X,SACJA,GACGpc,WAAagD,EAAE7D,QACfid,IAAapZ,EAAE7D,SACdid,EAAS1K,SAA8B1O,EAAE7D,SAE/Cid,EAASX,OAEf,KAAGV,CAAA,CAzIW,GCbRsB,EAAY,WAMhB,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,EAAA,MAAAtZ,EAAAA,EAAAA,GAAA,KAAAmZ,GACjBlZ,KAAKmZ,MAAQA,EACb,IACEnd,EAMEmd,EANFnd,OACA8L,EAKEqR,EALFrR,WACAtJ,EAIE2a,EAJF3a,UAAS8a,EAIPH,EAHFI,SAAAA,OAAQ,IAAAD,EAAG,WAAO,EAACA,EAAAE,EAGjBL,EAFFva,SAAAA,OAAQ,IAAA4a,EAAG,IAAGA,EAAAC,EAEZN,EADFpR,OAAAA,OAAM,IAAA0R,EAhCW,2BAgCMA,EAGzBzZ,KAAKuZ,SAAWA,EAGhB,IAAM5a,EAAOH,EAAY,YAAc,UACjCJ,EAAuB,QAAdgb,EAAGD,EAAMxa,UAAK,IAAAya,EAAAA,EAAI,GAGjCpZ,KAAK0Z,QAAU1d,EAEfgE,KAAK2Z,YAAc7R,EAEnB9H,KAAK4Z,WAAY,EAGjB5Z,KAAK6Z,iBAAmB7Z,KAAK6Z,iBAAiBnJ,KAAK1Q,MASnDA,KAAK8Z,eAAiB9G,YAAW,WAC/BtU,EAAmB1C,EAAQ2C,EAAMC,EAAUmJ,GAC3CsR,EAAKS,eAAiB9G,YAAW,WAC/BhX,EAAO2D,iBAAiB,gBAAiB0Z,EAAKQ,kBAAkB,GAChE7d,EAAO2D,iBAAiB,mBAAoB0Z,EAAKQ,kBAAkB,GAMnER,EAAKS,eAAiB9G,YAAW,WAC/BqG,EAAKU,oBACf,GAAWnb,EAAW,KACd5C,EAAOuC,MAAMI,GAAQP,CAC7B,GAAS,GACT,GAAO,EACP,CAoCG,OAlCH8B,EAAAA,EAAAA,GAAAgZ,EAAA,EAAAte,IAAA,mBAAAC,MAIE,SAAiBgF,GACXA,EAAE7D,SAAWgE,KAAK0Z,SACpB1Z,KAAK+Z,oBAEX,GAEA,CAAAnf,IAAA,qBAAAC,MAGE,WACOmF,KAAK4Z,YACR5Z,KAAK4Z,WAAY,EACjB5Z,KAAKuZ,WACDvZ,KAAK2Z,aACP3Z,KAAK2Z,cAGb,GAEA,CAAA/e,IAAA,UAAAC,MACE,WACMmF,KAAK8Z,gBACP3G,aAAanT,KAAK8Z,gBZuCtBpb,EYrCwBsB,KAAK0Z,SAC3B1Z,KAAK0Z,QAAQM,oBAAoB,gBAAiBha,KAAK6Z,kBAAkB,GACzE7Z,KAAK0Z,QAAQM,oBAAoB,mBAAoBha,KAAK6Z,kBAAkB,GACvE7Z,KAAK4Z,WACR5Z,KAAK+Z,oBAEX,KAAGb,CAAA,CA5Fe,GCdZe,EAAW,WAgBf,SAAAA,EAAY1P,EAAiBO,EAAc8C,IAAkB7N,EAAAA,EAAAA,GAAA,KAAAka,GAC3Dja,KAAK2J,SAA6B,IAAlBY,EAGhBvK,KAAKka,cAAgBpP,GAzBK,IA4B1B9K,KAAKma,kBAAoBvM,GA7BK,GA+B9B5N,KAAKoa,iBAAmBpa,KAAKma,kBAEzBna,KAAKka,cAAgB,IACvBla,KAAKoa,kBAAoB5c,KAAKI,KAAK,EAAIoC,KAAKka,cAAgBla,KAAKka,eAEvE,CAkDG,OAhDHha,EAAAA,EAAAA,GAAA+Z,EAAA,EAAArf,IAAA,YAAAC,MAME,SAAUwf,EAAeC,GAMvB,IACIC,EADAnH,EAAe,EAGnBkH,GAAa,IAEb,IAAME,EAAiBhd,KAAAid,IAAGjd,KAAKkd,GAAO1a,KAAKka,cAAgBla,KAAKma,kBAAoBG,GAEpF,GAA2B,IAAvBta,KAAKka,cAGP9G,GAAgBiH,GAFhBE,EAAQva,KAAK2J,SAAW3J,KAAKma,kBAAoBE,GAETC,GAAaE,EAErDxa,KAAK2J,SAAWyJ,GACMpT,KAAKma,kBAAqBI,EAC5BC,OACf,GAAIxa,KAAKka,cAAgB,EAAG,CACjCK,EAAS,EAAIva,KAAKoa,kBACLpa,KAAKka,cAAgBla,KAAKma,kBAAoBE,EAAgBra,KAAK2J,UAEhF,IAAMgR,EAAand,KAAKod,IAAI5a,KAAKoa,iBAAmBE,GAC9CO,EAAard,KAAKsd,IAAI9a,KAAKoa,iBAAmBE,GAEpDlH,EAAeoH,GACKH,EAAgBM,EAAaJ,EAAQM,GAEzD7a,KAAK2J,SAAWyJ,GACMpT,KAAKma,kBACPna,KAAKka,cACLM,IACExa,KAAKoa,iBAAmBC,EAAgBQ,EAC1C7a,KAAKoa,iBAAmBG,EAAQI,EAC1D,CAII,OAAOvH,CACX,KAAG6G,CAAA,CAhFc,GCWXc,EAAe,WAInB,SAAAA,EAAY5B,GAAO,IAAA6B,EAAA,MAAAjb,EAAAA,EAAAA,GAAA,KAAAgb,GACjB/a,KAAKmZ,MAAQA,EACbnZ,KAAKib,KAAO,EAEZ,IACE/P,EAQEiO,EARFjO,MACAC,EAOEgO,EAPFhO,IACAxB,EAMEwP,EANFxP,SACAyB,EAKE+N,EALF/N,SACAtD,EAIEqR,EAJFrR,WAAUoT,EAIR/B,EAHFI,SAAAA,OAAQ,IAAA2B,EAAG,WAAO,EAACA,EACnBpQ,EAEEqO,EAFFrO,aACA8C,EACEuL,EADFvL,iBAGF5N,KAAKuZ,SAAWA,EAEhB,IAAM4B,EAAQ,IAAIlB,EAAYtQ,EAAUmB,EAAc8C,GAClDwN,EAAWjJ,KAAKtE,MAChBwM,EAAgBnP,EAAQC,EAsB5BnL,KAAKib,KAAOzI,uBApBU,SAAhB6I,IACAL,EAAKC,OACPZ,EAAgBc,EAAMG,UAAUjB,EAAelI,KAAKtE,MAAQuN,GAGxD5d,KAAKG,IAAI0c,GAAiB,GAAK7c,KAAKG,IAAIwd,EAAMxR,UAAY,IAE5DyB,EAASD,GACLrD,GACFA,IAEFkT,EAAKzB,aAEL6B,EAAWjJ,KAAKtE,MAChBzC,EAASiP,EAAgBlP,GACzB6P,EAAKC,KAAOzI,sBAAsB6I,IAG5C,GAGA,CAQG,OANHnb,EAAAA,EAAAA,GAAA6a,EAAA,EAAAngB,IAAA,UAAAC,MACE,WACMmF,KAAKib,MAAQ,GACf5H,qBAAqBrT,KAAKib,MAE5Bjb,KAAKib,KAAO,CAChB,KAAGF,CAAA,CAtDkB,GCGfQ,EAAU,WACd,SAAAA,KAAcxb,EAAAA,EAAAA,GAAA,KAAAwb,GAEZvb,KAAKwb,iBAAmB,EAC5B,CA4FG,OA1FHtb,EAAAA,EAAAA,GAAAqb,EAAA,EAAA3gB,IAAA,cAAAC,MAGE,SAAYse,GACVnZ,KAAKyb,OAAOtC,GAAO,EACvB,GAEA,CAAAve,IAAA,kBAAAC,MAGE,SAAgBse,GACdnZ,KAAKyb,OAAOtC,EAChB,GAEA,CAAAve,IAAA,SAAAC,MAME,SAAOse,EAAOuC,GAAU,IAAAC,EAAA,KAChBC,EAAYF,EACd,IAAIX,EAAmD5B,GACvD,IAAID,EAA6CC,GAKrD,OAHAnZ,KAAKwb,iBAAiB3f,KAAK+f,GAC3BA,EAAUrC,SAAW,kBAAMoC,EAAKE,KAAKD,EAAU,EAExCA,CACX,GAEA,CAAAhhB,IAAA,OAAAC,MAGE,SAAK+gB,GACHA,EAAUE,UACV,IAAMna,EAAQ3B,KAAKwb,iBAAiB5I,QAAQgJ,GACxCja,GAAS,GACX3B,KAAKwb,iBAAiB7H,OAAOhS,EAAO,EAE1C,GAAG,CAAA/G,IAAA,UAAAC,MAED,WACEmF,KAAKwb,iBAAiBnf,SAAQ,SAACuf,GAC7BA,EAAUE,SAChB,IACI9b,KAAKwb,iBAAmB,EAC5B,GAEA,CAAA5gB,IAAA,aAAAC,MAGE,WACEmF,KAAKwb,iBAAmBxb,KAAKwb,iBAAiB9f,QAAO,SAACkgB,GACpD,OAAIA,EAAUzC,MAAMxR,QAClBiU,EAAUE,WACH,EAIf,GACA,GAAG,CAAAlhB,IAAA,iBAAAC,MAED,WACEmF,KAAKwb,iBAAmBxb,KAAKwb,iBAAiB9f,QAAO,SAACkgB,GACpD,OAAIA,EAAUzC,MAAMlD,eAClB2F,EAAUE,WACH,EAIf,GACA,GAWA,CAAAlhB,IAAA,eAAAC,MAGE,WACE,OAAOmF,KAAKwb,iBAAiBO,MAAK,SAACH,GACjC,OAAOA,EAAUzC,MAAMxR,KAC7B,GACA,KAAG4T,CAAA,CAhGa,GCdVS,EAAW,WAIf,SAAAA,EAAY9a,IAAMnB,EAAAA,EAAAA,GAAA,KAAAic,GAChBhc,KAAKkB,KAAOA,EACZA,EAAKoP,OAAOC,IAAIrP,EAAK0F,QAAS,QAAoC5G,KAAKic,SAASvL,KAAK1Q,MACzF,CAmDG,OAjDHE,EAAAA,EAAAA,GAAA8b,EAAA,EAAAphB,IAAA,WAAAC,MAIE,SAASgF,GACPA,EAAEgS,iBACF,IAAQnJ,EAAc1I,KAAKkB,KAAnBwH,UACFwT,EAAmBrc,EAAnBqc,OAAQC,EAAWtc,EAAXsc,OAEd,GAAKzT,IAID1I,KAAKkB,KAAKuB,SAAS,QAAS,CAAE0L,cAAetO,IAAKmG,iBAItD,GAAInG,EAAE0Y,SAAWvY,KAAKkB,KAAKD,QAAQmb,aAEjC,GAAI1T,EAAUxB,aAAc,CAC1B,IAAIkB,GAAc+T,EACE,IAAhBtc,EAAEwc,UACJjU,GAAc,IAEdA,GAAcvI,EAAEwc,UAAY,EAAI,KAElCjU,EAAU5K,KAAAid,IAAG,EAAKrS,GAElB,IAAMvB,EAAgB6B,EAAUpG,cAAgB8F,EAChDM,EAAUV,OAAOnB,EAAe,CAC9B3J,EAAG2C,EAAEyc,QACLnf,EAAG0C,EAAE0c,SAEf,OAGU7T,EAAUkD,eACQ,IAAhB/L,EAAEwc,YAEJH,GAAU,GACVC,GAAU,IAGZzT,EAAUrC,MACRqC,EAAUlE,IAAItH,EAAIgf,EAClBxT,EAAUlE,IAAIrH,EAAIgf,GAI5B,KAAGH,CAAA,CA1Dc,GCqEhB,IAEKQ,GAAStc,EAAAA,EAAAA,IAKb,SAAAsc,EAAYtb,EAAM2B,GAAM,IAAA4Z,GAAA1c,EAAAA,EAAAA,GAAA,KAAAyc,GACtB,IAAM5U,EAAO/E,EAAK+E,MAAQ/E,EAAKpG,UAC3BigB,EAAc7Z,EAAK8Z,KAGvB,IAA2B,IAAvBzb,EAAKD,QAAQ2G,GAAjB,CAO0C,kBAA/B1G,EAAKD,QAAQ2G,EAAO,SAM7B8U,EAAcxb,EAAKD,QAAQ2G,EAAO,QAGpC1G,EAAKuB,SAAS,kBAAmB,CAAEI,KAAAA,IAEnC,IAAIpG,EAAY,GACZoG,EAAK+Z,UACPngB,GAAa,gBACbA,GAAcoG,EAAKpG,WAAa,iBAAJ4B,OAAqBwE,EAAK+E,OAEtDnL,GAAcoG,EAAKpG,WAAa,SAAJ4B,OAAawE,EAAK+E,MAGhD,IAAIlL,EAAUmG,EAAK+Z,SAAY/Z,EAAKnG,SAAW,SAAamG,EAAKnG,SAAW,MAGtEkK,EAAUpK,EAAcC,EAF9BC,EAAsDA,EAAQmgB,eAI9D,GAAIha,EAAK+Z,SAAU,CACD,WAAZlgB,IACgCkK,EAASzG,KAAO,UAGpD,IAAM2c,EAAUja,EAAVia,MACEC,EAAcla,EAAdka,UAGoC,kBAAjC7b,EAAKD,QAAQ2G,EAAO,WAE7BkV,EAAQ5b,EAAKD,QAAQ2G,EAAO,UAG1BkV,IACFlW,EAAQkW,MAAQA,GAGlB,IAAME,EAAWD,GAAaD,EAC1BE,GACFpW,EAAQuO,aAAa,aAAc6H,EAE3C,CAEIpW,EAAQqW,UAtGZ,SAAwBC,GACtB,GAAwB,kBAAbA,EAQT,OAAOA,EAGT,IAAKA,IAAaA,EAASC,YACzB,MAAO,GAGT,IAAMC,EAAUF,EACZG,EAAM,wFAiBV,OAfAA,EAAMA,EAAIxc,MAAM,MAAMyc,KAA4BF,EAAQG,MAAQ,IAO9DH,EAAQI,YACVH,GAAO,8CAAgDD,EAAQI,UAAY,OAG7EH,GAAOD,EAAQK,MAEfJ,EAAO,QAGT,CAmEwBK,CAAehB,GAE/B7Z,EAAK8a,QACP9a,EAAK8a,OAAO/W,EAAS1F,GAGnB2B,EAAK+a,UACPhX,EAAQiX,QAAU,SAAChe,GACW,kBAAjBgD,EAAK+a,QAEd1c,EAAK2B,EAAK+a,WACuB,oBAAjB/a,EAAK+a,SACrB/a,EAAK+a,QAAQ/d,EAAG+G,EAAS1F,EAEnC,GAII,IAAM4c,EAAWjb,EAAKib,UAAY,MAE9B/Y,EAAY7D,EAAK0F,QACJ,QAAbkX,GACG5c,EAAK6c,SACR7c,EAAK6c,OAASvhB,EAAc,oCAAqC,MAAO0E,EAAKsP,aAE/EzL,EAAY7D,EAAK6c,SAIjBnX,EAAQyH,UAAUkC,IAAI,uBAEL,YAAbuN,IACF/Y,EAAY7D,EAAKsP,aAIZ,QAATiM,EAAA1X,SAAS,IAAA0X,GAATA,EAAW3f,YAAYoE,EAAK8c,aAAa,YAAapX,EAAS/D,GAxFnE,CAyFA,ICtKA,SAASob,EAAgBrX,EAAS1F,EAAMgd,GACtCtX,EAAQyH,UAAUkC,IAAI,uBAEtB3J,EAAQuO,aAAa,gBAAiB,eACtCjU,EAAKmP,GAAG,UAAU,WACXnP,EAAKD,QAAQkd,OAGbvX,EAASwX,SAFRF,IAEqBhd,EAAKoD,UAAYpD,EAAKmU,cAAgB,KAGtCnU,EAAKoD,UAAY,GAGhD,GACA,CAGO,IAAM+Z,EAAY,CACvBzW,KAAM,YACNnL,UAAW,4BACXqgB,MAAO,WACPwB,MAAO,GACP1B,UAAU,EACVkB,SAAU,UACVnB,KAAM,CACJQ,aAAa,EACbI,KAAM,GACNE,MAAO,4EACPD,UAAW,mBAEbI,QAAS,OACTD,OAAQM,GAIGM,GAAY,CACvB3W,KAAM,YACNnL,UAAW,4BACXqgB,MAAO,OACPwB,MAAO,GACP1B,UAAU,EACVkB,SAAU,UACVnB,KAAM,CACJQ,aAAa,EACbI,KAAM,GACNE,MAAO,uCACPD,UAAW,mBAEbI,QAAS,OACTD,OAAQ,SAAC/gB,EAAIsE,GACX+c,EAAgBrhB,EAAIsE,GAAM,EAC9B,GChEMsd,GAAc,CAClB5W,KAAM,QACNkV,MAAO,QACPwB,MAAO,GACP1B,UAAU,EACVD,KAAM,CACJQ,aAAa,EACbM,MAAO,wFACPD,UAAW,mBAEbI,QAAS,SCVLa,GAAa,CACjB7W,KAAM,OACNkV,MAAO,OACPwB,MAAO,GACP1B,UAAU,EACVD,KAAM,CACJQ,aAAa,EAEbM,MAAO,uPAGPD,UAAW,kBAEbI,QAAS,cCbEc,GAAmB,CAC9B9W,KAAM,YACNkW,SAAU,MACVQ,MAAO,EACP3B,KAAM,CACJQ,aAAa,EAEbM,MAAO,kIACPD,UAAW,qBAEbG,OAAQ,SAACgB,EAAkBzd,GAEzB,IAAI0d,EAEAC,EAAe,KAabC,EAAyB,SAACC,GAPH,IAACtiB,EAAW8T,EAQnCqO,IAAcG,IAChBH,EAAYG,EATctiB,EAUL,SAVgB8T,EAUNwO,EATjCJ,EAAiBtQ,UAAUU,OAAO,oBAAsBtS,EAAW8T,GAWzE,EAEUyO,EAA4B,WAAM,IAAAC,EACtC,GAAmB,QAAfA,EAAC/d,EAAKwH,iBAAS,IAAAuW,IAAdA,EAAgBra,QAAQsa,YAM3B,OALAJ,GAAuB,QACnBD,IACF1L,aAAa0L,GACbA,EAAe,OAKdA,IAEHA,EAAe7L,YAAW,WAAM,IAAAmM,EAC9BL,EAAuBtW,QAAsB,QAAf2W,EAACje,EAAKwH,iBAAS,IAAAyW,OAAA,EAAdA,EAAgBva,QAAQsa,cACvDL,EAAe,IACzB,GAAW3d,EAAKD,QAAQme,gBAExB,EAEIle,EAAKmP,GAAG,SAAU2O,GAElB9d,EAAKmP,GAAG,gBAAgB,SAACxQ,GACnBqB,EAAKwH,YAAc7I,EAAEwC,OACvB2c,GAER,IAGQ9d,EAAKme,KACPne,EAAKme,GAAGL,0BAA4BA,EAE1C,GCjEaM,GAAmB,CAC9B1X,KAAM,UACN0W,MAAO,EACPX,OAAQ,SAAC4B,EAAgBre,GACvBA,EAAKmP,GAAG,UAAU,WAChBkP,EAAeC,UAAate,EAAKoD,UAAY,EACfpD,EAAKD,QAAQwe,kBACbve,EAAKmU,aACzC,GACA,GCSA,SAASqK,GAAY9iB,EAAI+iB,GACvB/iB,EAAGyR,UAAUU,OAAO,kBAAmB4Q,EACzC,CAAC,IAEKC,GAAE,WAIN,SAAAA,EAAY1e,IAAMnB,EAAAA,EAAAA,GAAA,KAAA6f,GAChB5f,KAAKkB,KAAOA,EACZlB,KAAK6f,cAAe,EAEpB7f,KAAK8f,eAAiB,GAEtB9f,KAAK+f,MAAQ,GAEb/f,KAAKgf,0BAA4B,WAAO,EAMxChf,KAAKggB,2BAAwB5iB,CACjC,CA+FG,OA/FA8C,EAAAA,EAAAA,GAAA0f,EAAA,EAAAhlB,IAAA,OAAAC,MAED,WAAO,IAAAolB,EAAA,KACG/e,EAASlB,KAATkB,KACRlB,KAAK6f,cAAe,EACpB7f,KAAK8f,eAAiB,CACpBtB,GACAH,EACAE,GACAE,GACAC,GACAY,IAGFpe,EAAKuB,SAAS,cAGdzC,KAAK8f,eAAeI,MAAK,SAACC,EAAGC,GAE3B,OAAQD,EAAE7B,OAAS,IAAM8B,EAAE9B,OAAS,EAC1C,IAEIte,KAAK+f,MAAQ,GAEb/f,KAAK6f,cAAe,EACpB7f,KAAK8f,eAAezjB,SAAQ,SAACgkB,GAC3BJ,EAAKK,gBAAgBD,EAC3B,IAEInf,EAAKmP,GAAG,UAAU,WAAM,IAAAkQ,EACV,QAAZA,EAAArf,EAAK0F,eAAO,IAAA2Z,GAAZA,EAAclS,UAAUU,OAAO,kBAA0C,IAAvB7N,EAAKmU,cAC7D,IAEInU,EAAKmP,GAAG,iBAAiB,kBAAM4P,EAAKO,kBAAkB,GAC1D,GAEA,CAAA5lB,IAAA,kBAAAC,MAGE,SAAgB4lB,GACVzgB,KAAK6f,aACP7f,KAAK+f,MAAMlkB,KACT,IAAI2gB,EAAUxc,KAAKkB,KAAMuf,IAG3BzgB,KAAK8f,eAAejkB,KAAK4kB,EAE/B,GAEA,CAAA7lB,IAAA,mBAAAC,MAME,WACE,IAAA6lB,EAAyC1gB,KAAKkB,KAAtC+X,EAAQyH,EAARzH,SAAUvQ,EAASgY,EAAThY,UAAWzH,EAAOyf,EAAPzf,QAE7B,IAAIjB,KAAKkB,KAAKwD,OAAOic,WAAc1H,GAAavQ,EAAhD,CAIA,IAAMpG,EAAkBoG,EAAlBpG,cAON,GAJKtC,KAAKkB,KAAKwD,OAAOC,SACpBrC,EAAgBoG,EAAU5E,WAAWT,SAGnCf,IAAkBtC,KAAKggB,sBAA3B,CAGAhgB,KAAKggB,sBAAwB1d,EAE7B,IAAMse,EAAoBlY,EAAU5E,WAAWT,QAAUqF,EAAU5E,WAAWR,UAG9E,GAAI9F,KAAKG,IAAIijB,GAAqB,MAASlY,EAAUxB,aAInD,OAFAwY,GAAYzG,GAAU,QACtBA,EAAS5K,UAAUlI,OAAO,sBAI5B8S,EAAS5K,UAAUkC,IAAI,sBAKvBmP,GAAYzG,GAHe3W,IAAkBoG,EAAU5E,WAAWT,QAC9DqF,EAAU5E,WAAWR,UAAYoF,EAAU5E,WAAWT,UAEdf,GAEX,SAA7BrB,EAAQ4f,kBACwB,kBAA7B5f,EAAQ4f,kBACb5H,EAAS5K,UAAUkC,IAAI,sBAtB7B,CAXA,CAmCA,KAAGqP,CAAA,CAlHK,GCkLR,IAKMkB,GAAe,WAKnB,SAAAA,EAAY3gB,EAAM4gB,IAAShhB,EAAAA,EAAAA,GAAA,KAAA+gB,GACzB9gB,KAAKG,KAAOA,EACZH,KAAKgG,kBAAmB,EACpB+a,GACFhmB,OAAOimB,OAAOhhB,KAAM+gB,EAE1B,CAIG,OAJA7gB,EAAAA,EAAAA,GAAA4gB,EAAA,EAAAlmB,IAAA,iBAAAC,MAED,WACEmF,KAAKgG,kBAAmB,CAC5B,KAAG8a,CAAA,CAfkB,GAsBfG,GAAS,WACb,SAAAA,KAAclhB,EAAAA,EAAAA,GAAA,KAAAkhB,GAIZjhB,KAAKkhB,WAAa,CAAC,EAKnBlhB,KAAKmhB,SAAW,CAAC,EAGjBnhB,KAAKkB,UAAO9D,EAGZ4C,KAAKiB,aAAU7D,CACnB,CAkGG,OAhGH8C,EAAAA,EAAAA,GAAA+gB,EAAA,EAAArmB,IAAA,YAAAC,MAME,SAAU+M,EAAMwZ,GAAoB,IAAAC,EAAAC,EAAAC,EAAhBC,EAAQtlB,UAAAC,OAAA,QAAAiB,IAAAlB,UAAA,GAAAA,UAAA,GAAG,IACxB8D,KAAKmhB,SAASvZ,KACjB5H,KAAKmhB,SAASvZ,GAAQ,IAGL,QAAnByZ,EAAArhB,KAAKmhB,SAASvZ,UAAK,IAAAyZ,GAAnBA,EAAqBxlB,KAAK,CAAEulB,GAAAA,EAAII,SAAAA,IACb,QAAnBF,EAAAthB,KAAKmhB,SAASvZ,UAAK,IAAA0Z,GAAnBA,EAAqBpB,MAAK,SAACuB,EAAIC,GAAE,OAAKD,EAAGD,SAAWE,EAAGF,QAAQ,IAEtD,QAATD,EAAAvhB,KAAKkB,YAAI,IAAAqgB,GAATA,EAAWI,UAAU/Z,EAAMwZ,EAAII,EACnC,GAEA,CAAA5mB,IAAA,eAAAC,MAKE,SAAa+M,EAAMwZ,GACbphB,KAAKmhB,SAASvZ,KAEhB5H,KAAKmhB,SAASvZ,GAAQ5H,KAAKmhB,SAASvZ,GAAMlM,QAAO,SAAAA,GAAM,OAAKA,EAAO0lB,KAAOA,CAAE,KAG1EphB,KAAKkB,MACPlB,KAAKkB,KAAK0gB,aAAaha,EAAMwZ,EAEnC,GAEA,CAAAxmB,IAAA,eAAAC,MAME,SAAa+M,GAAe,QAAAia,EAAAC,EAAA,KAAAC,EAAA7lB,UAAAC,OAAN6lB,EAAI,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,EAAA,GAAAhmB,UAAAgmB,GAKxB,OAJmB,QAAnBL,EAAA7hB,KAAKmhB,SAASvZ,UAAK,IAAAia,GAAnBA,EAAqBxlB,SAAQ,SAACX,GAE5BsmB,EAAK,GAAKtmB,EAAO0lB,GAAGtlB,MAAMgmB,EAAME,EACtC,IACWA,EAAK,EAChB,GAEA,CAAApnB,IAAA,KAAAC,MAKE,SAAG+M,EAAMwZ,GAAI,IAAAe,EAAAC,EACNpiB,KAAKkhB,WAAWtZ,KACnB5H,KAAKkhB,WAAWtZ,GAAQ,IAEL,QAArBua,EAAAniB,KAAKkhB,WAAWtZ,UAAK,IAAAua,GAArBA,EAAuBtmB,KAAKulB,GAKnB,QAATgB,EAAApiB,KAAKkB,YAAI,IAAAkhB,GAATA,EAAW/R,GAAGzI,EAAMwZ,EACxB,GAEA,CAAAxmB,IAAA,MAAAC,MAKE,SAAI+M,EAAMwZ,GAAI,IAAAiB,EACRriB,KAAKkhB,WAAWtZ,KAElB5H,KAAKkhB,WAAWtZ,GAAQ5H,KAAKkhB,WAAWtZ,GAAMlM,QAAO,SAAA0E,GAAQ,OAAKghB,IAAOhhB,CAAQ,KAG1E,QAATiiB,EAAAriB,KAAKkB,YAAI,IAAAmhB,GAATA,EAAWC,IAAI1a,EAAMwZ,EACzB,GAEA,CAAAxmB,IAAA,WAAAC,MAME,SAAS+M,EAAMmZ,GAAS,IAAAwB,EAAAC,EAAA,KACtB,GAAIxiB,KAAKkB,KACP,OAAOlB,KAAKkB,KAAKuB,SAASmF,EAAMmZ,GAGlC,IAAM/S,EAA0C,IAAI8S,GAAgBlZ,EAAMmZ,GAM1E,OAJqB,QAArBwB,EAAAviB,KAAKkhB,WAAWtZ,UAAK,IAAA2a,GAArBA,EAAuBlmB,SAAQ,SAAC+D,GAC9BA,EAAS4O,KAAKwT,EAAMxU,EAC1B,IAEWA,CACX,KAAGiT,CAAA,CAnHY,GClOTwB,GAAW,WAKf,SAAAA,EAAYC,EAAU3d,GAUpB,IAV+BhF,EAAAA,EAAAA,GAAA,KAAA0iB,GAI/BziB,KAAK4G,QAAUpK,EACb,mCACAkmB,EAAW,MAAQ,MACnB3d,GAGE2d,EAAU,CACZ,IAAMC,EAAyC3iB,KAAK4G,QACpD+b,EAAMC,SAAW,QACjBD,EAAME,IAAM,GACZF,EAAMG,IAAMJ,EACZC,EAAMxN,aAAa,OAAQ,eACjC,CAEInV,KAAK4G,QAAQuO,aAAa,cAAe,OAC7C,CA4BG,OA1BHjV,EAAAA,EAAAA,GAAAuiB,EAAA,EAAA7nB,IAAA,mBAAAC,MAIE,SAAiBqE,EAAOC,GACjBa,KAAK4G,UAImB,QAAzB5G,KAAK4G,QAAQlK,SAIfqC,EAAeiB,KAAK4G,QAAS,IAAK,QAClC5G,KAAK4G,QAAQrI,MAAMgH,gBAAkB,MACrCvF,KAAK4G,QAAQrI,MAAMC,UAAYN,EAAkB,EAAG,EAAGgB,EAAQ,MAE/DH,EAAeiB,KAAK4G,QAAS1H,EAAOC,GAE1C,GAAG,CAAAvE,IAAA,UAAAC,MAED,WAAU,IAAAkoB,EACQ,QAAhBA,EAAI/iB,KAAK4G,eAAO,IAAAmc,GAAZA,EAAcC,YAChBhjB,KAAK4G,QAAQT,SAEfnG,KAAK4G,QAAU,IACnB,KAAG6b,CAAA,CApDc,GCMXQ,GAAO,WAMX,SAAAA,EAAYvhB,EAAUwhB,EAAUvhB,IAAO5B,EAAAA,EAAAA,GAAA,KAAAkjB,GACrCjjB,KAAKkjB,SAAWA,EAChBljB,KAAK6C,KAAOnB,EACZ1B,KAAK2B,MAAQA,EAGb3B,KAAK4G,aAAUxJ,EAEf4C,KAAK2G,iBAAcvJ,EAEnB4C,KAAKqC,WAAQjF,EAEb4C,KAAKmjB,oBAAsB,EAC3BnjB,KAAKojB,qBAAuB,EAE5BpjB,KAAKd,MAAQgD,OAAOlC,KAAK6C,KAAK7D,IAAMkD,OAAOlC,KAAK6C,KAAK3D,QAAU,EAC/Dc,KAAKb,OAAS+C,OAAOlC,KAAK6C,KAAK5D,IAAMiD,OAAOlC,KAAK6C,KAAK1D,SAAW,EAEjEa,KAAKqjB,YAAa,EAClBrjB,KAAKkG,UAAW,EAChBlG,KAAKsjB,YAAa,EAElBtjB,KAAKujB,MAAQnkB,EAETY,KAAK6C,KAAK1C,KACZH,KAAKG,KAAOH,KAAK6C,KAAK1C,KACbH,KAAK6C,KAAKigB,IACnB9iB,KAAKG,KAAO,QAEZH,KAAKG,KAAO,OAGdH,KAAKkjB,SAASzgB,SAAS,cAAe,CAAEmC,QAAS5E,MACrD,CAqdG,OArdAE,EAAAA,EAAAA,GAAA+iB,EAAA,EAAAroB,IAAA,oBAAAC,MAED,WAAoB,IAAA2oB,EAAA,KACdxjB,KAAK2G,cAAgB3G,KAAKyjB,mBAE5BzQ,YAAW,WACLwQ,EAAK7c,cACP6c,EAAK7c,YAAYmV,UACjB0H,EAAK7c,iBAAcvJ,EAE7B,GAAS,IAET,GAEA,CAAAxC,IAAA,OAAAC,MAME,SAAK6oB,EAAQC,GACX,GAAI3jB,KAAKqC,OAASrC,KAAK4jB,iBACrB,GAAK5jB,KAAK2G,YAYH,CACL,IAAMkd,EAAgB7jB,KAAK2G,YAAYC,QAEnCid,IAAkBA,EAAcC,eAClC9jB,KAAKqC,MAAM0C,UAAUgf,QAAQF,EAEvC,KAlB6B,CACrB,IAAMG,EAAiBhkB,KAAKkjB,SAASlF,aACnC,oBAGChe,KAAK6C,KAAKohB,OAAQjkB,KAAKqC,MAAMoC,eAAgBzE,KAAK6C,KAAKohB,KACxDjkB,MAEFA,KAAK2G,YAAc,IAAI8b,GACrBuB,EACAhkB,KAAKqC,MAAM0C,UAErB,CASQ/E,KAAK4G,UAAY+c,GAIjB3jB,KAAKkjB,SAASzgB,SAAS,cAAe,CAAEmC,QAAS5E,KAAM0jB,OAAAA,IAAU1d,mBAIjEhG,KAAKkkB,kBACPlkB,KAAK4G,QAAUpK,EAAc,YAAa,OAGtCwD,KAAKmjB,qBACPnjB,KAAKmkB,UAAUT,KAGjB1jB,KAAK4G,QAAUpK,EAAc,gBAAiB,OAC9CwD,KAAK4G,QAAQqW,UAAYjd,KAAK6C,KAAK8Z,MAAQ,IAGzCgH,GAAU3jB,KAAKqC,OACjBrC,KAAKqC,MAAMqD,mBAAkB,GAEnC,GAEA,CAAA9K,IAAA,YAAAC,MAKE,SAAU6oB,GAAQ,IAAAU,EAAAC,EAAAC,EAAA,KAChB,GAAKtkB,KAAKkkB,kBACJlkB,KAAK4G,UACN5G,KAAKkjB,SAASzgB,SAAS,mBAAoB,CAAEmC,QAAS5E,KAAM0jB,OAAAA,IAAU1d,iBAF3E,CAMA,IAAMue,EAA8CvkB,KAAK4G,QAEzD5G,KAAKwkB,oBAEDxkB,KAAK6C,KAAK4hB,SACZF,EAAaE,OAASzkB,KAAK6C,KAAK4hB,QAGlCF,EAAazB,IAAmB,QAAhBsB,EAAGpkB,KAAK6C,KAAKigB,WAAG,IAAAsB,EAAAA,EAAI,GACpCG,EAAa1B,IAAmB,QAAhBwB,EAAGrkB,KAAK6C,KAAKggB,WAAG,IAAAwB,EAAAA,EAAI,GAEpCrkB,KAAKujB,MAAQnkB,EAETmlB,EAAaG,SACf1kB,KAAK2kB,YAELJ,EAAaK,OAAS,WACpBN,EAAKK,UACb,EAEMJ,EAAaM,QAAU,WACrBP,EAAKQ,SACb,EAxBA,CA0BA,GAEA,CAAAlqB,IAAA,WAAAC,MAKE,SAASwH,GACPrC,KAAKqC,MAAQA,EACbrC,KAAKkG,UAAW,EAChBlG,KAAKkjB,SAAW7gB,EAAMnB,IAG1B,GAEA,CAAAtG,IAAA,WAAAC,MAGE,WACEmF,KAAKujB,MAAQnkB,EAETY,KAAKqC,OAASrC,KAAK4G,UACrB5G,KAAKkjB,SAASzgB,SAAS,eAAgB,CAAEJ,MAAOrC,KAAKqC,MAAOuC,QAAS5E,OAGjEA,KAAKqC,MAAMgC,UACRrE,KAAKqC,MAAM4C,gBACVjF,KAAK4G,QAAQoc,aACnBhjB,KAAKiG,SACLjG,KAAKqC,MAAMqD,mBAAkB,IAG3B1F,KAAKujB,QAAUnkB,GAAqBY,KAAKujB,QAAUnkB,GACrDY,KAAK+kB,oBAGb,GAEA,CAAAnqB,IAAA,UAAAC,MAGE,WACEmF,KAAKujB,MAAQnkB,EAETY,KAAKqC,QACPrC,KAAKglB,eACLhlB,KAAKkjB,SAASzgB,SAAS,eAAgB,CAAEJ,MAAOrC,KAAKqC,MAAO4iB,SAAS,EAAMrgB,QAAS5E,OACpFA,KAAKkjB,SAASzgB,SAAS,YAAa,CAAEJ,MAAOrC,KAAKqC,MAAOuC,QAAS5E,OAExE,GAEA,CAAApF,IAAA,YAAAC,MAGE,WACE,OAAOmF,KAAKkjB,SAASlF,aACnB,mBACAhe,KAAKujB,QAAUnkB,EACfY,KAEN,GAEA,CAAApF,IAAA,UAAAC,MAGE,WACE,OAAOmF,KAAKujB,QAAUnkB,CAC1B,GAEA,CAAAxE,IAAA,iBAAAC,MAGE,WACE,MAAqB,UAAdmF,KAAKG,IAChB,GAEA,CAAAvF,IAAA,mBAAAC,MAME,SAAiBqE,EAAOC,GACtB,GAAKa,KAAK4G,UAIN5G,KAAK2G,aACP3G,KAAK2G,YAAYF,iBAAiBvH,EAAOC,IAGvCa,KAAKkjB,SAASzgB,SAChB,gBACA,CAAEmC,QAAS5E,KAAMd,MAAAA,EAAOC,OAAAA,IAAU6G,mBAKpCjH,EAAeiB,KAAK4G,QAAS1H,EAAOC,GAEhCa,KAAKkkB,mBAAqBlkB,KAAKilB,YAAW,CAC5C,IAAMC,GAAwBllB,KAAKmjB,qBAAuBjkB,EAE1Dc,KAAKmjB,oBAAsBjkB,EAC3Bc,KAAKojB,qBAAuBjkB,EAExB+lB,EACFllB,KAAKmkB,WAAU,GAEfnkB,KAAKwkB,oBAGHxkB,KAAKqC,OACPrC,KAAKkjB,SAASzgB,SACZ,kBACA,CAAEJ,MAAOrC,KAAKqC,MAAOnD,MAAAA,EAAOC,OAAAA,EAAQyF,QAAS5E,MAGvD,CACA,GAEA,CAAApF,IAAA,aAAAC,MAGE,WACE,OAAOmF,KAAKkjB,SAASlF,aACnB,oBACAhe,KAAKkkB,kBAAqBlkB,KAAKujB,QAAUnkB,EACzCY,KAEN,GAEA,CAAApF,IAAA,oBAAAC,MAGE,WAME,GAAKmF,KAAKkkB,kBAAqBlkB,KAAK4G,SAAY5G,KAAK6C,KAAK4hB,OAA1D,CAIA,IAAMU,EAAuCnlB,KAAK4G,QAC5Cwe,EAAaplB,KAAKkjB,SAASlF,aAC/B,mBACAhe,KAAKmjB,oBACLnjB,QAICmlB,EAAME,QAAQC,iBACZF,EAAaG,SAASJ,EAAME,QAAQC,gBAAiB,OAExDH,EAAMK,MAAQJ,EAAa,KAC3BD,EAAME,QAAQC,gBAAkBG,OAAOL,GAd7C,CAgBA,GAEA,CAAAxqB,IAAA,iBAAAC,MAGE,WACE,OAAOmF,KAAKkjB,SAASlF,aACnB,wBACAhe,KAAKkkB,iBACLlkB,KAEN,GAEA,CAAApF,IAAA,WAAAC,MAGE,WACMmF,KAAKkjB,SAASzgB,SAAS,kBAAmB,CAAEmC,QAAS5E,OAAQgG,kBAIjEhG,KAAKyF,MAAK,EACd,GAEA,CAAA7K,IAAA,kBAAAC,MAGE,WACE,OAAOmF,KAAKkjB,SAASlF,aACnB,uBACAhe,KAAKkf,YACLlf,KAEN,GAEA,CAAApF,IAAA,UAAAC,MAGE,WACEmF,KAAKkG,UAAW,EAChBlG,KAAKqC,WAAQjF,EAET4C,KAAKkjB,SAASzgB,SAAS,iBAAkB,CAAEmC,QAAS5E,OAAQgG,mBAIhEhG,KAAKmG,SAEDnG,KAAK2G,cACP3G,KAAK2G,YAAYmV,UACjB9b,KAAK2G,iBAAcvJ,GAGjB4C,KAAKkkB,kBAAoBlkB,KAAK4G,UAChC5G,KAAK4G,QAAQge,OAAS,KACtB5kB,KAAK4G,QAAQie,QAAU,KACvB7kB,KAAK4G,aAAUxJ,GAErB,GAEA,CAAAxC,IAAA,eAAAC,MAGE,WACE,GAAImF,KAAKqC,MAAO,KAAAqjB,EAAAC,EACVC,EAAappB,EAAc,kBAAmB,OAClDopB,EAAWpG,UAA2C,QAAlCkG,EAAwB,QAAxBC,EAAG3lB,KAAKkjB,SAASjiB,eAAO,IAAA0kB,OAAA,EAArBA,EAAuBE,gBAAQ,IAAAH,EAAAA,EAAI,GAC1DE,EAA4C5lB,KAAKkjB,SAASlF,aACxD,sBACA4H,EACA5lB,MAEFA,KAAK4G,QAAUpK,EAAc,0CAA2C,OACxEwD,KAAK4G,QAAQ9J,YAAY8oB,GACzB5lB,KAAKqC,MAAM0C,UAAUya,UAAY,GACjCxf,KAAKqC,MAAM0C,UAAUjI,YAAYkD,KAAK4G,SACtC5G,KAAKqC,MAAMqD,mBAAkB,GAC7B1F,KAAK+kB,mBACX,CACA,GAEA,CAAAnqB,IAAA,SAAAC,MAGE,WAAS,IAAAirB,EAAA,KACP,IAAI9lB,KAAKqjB,YAAerjB,KAAK4G,QAM7B,GAFA5G,KAAKqjB,YAAa,EAEdrjB,KAAKujB,QAAUnkB,GAKnB,IAAIY,KAAKkjB,SAASzgB,SAAS,gBAAiB,CAAEmC,QAAS5E,OAAQgG,iBAA/D,CAIA,IAAM+f,EAAkB,WAAY/lB,KAAK4G,QAErC5G,KAAKkkB,iBAaH6B,GAAkB/lB,KAAKqC,SAAWrC,KAAKqC,MAAMgC,UAAYhF,MAC3DW,KAAKsjB,YAAa,EAIjBtjB,KAAK4G,QAASof,SAASC,OAAM,WAAO,IAAGC,SAAQ,WAC9CJ,EAAKxC,YAAa,EAClBwC,EAAKK,aACf,KAEQnmB,KAAKmmB,cAEEnmB,KAAKqC,QAAUrC,KAAK4G,QAAQoc,YACrChjB,KAAKqC,MAAM0C,UAAUjI,YAAYkD,KAAK4G,QA9B5C,OANM5G,KAAKglB,cAsCX,GAEA,CAAApqB,IAAA,WAAAC,MAKE,YACMmF,KAAKkjB,SAASzgB,SAAS,kBAAmB,CAAEmC,QAAS5E,OAAQgG,kBAC3DhG,KAAKqC,QAIPrC,KAAKkkB,kBAAoBlkB,KAAKsjB,aAAejkB,IAG/CW,KAAKmmB,cACInmB,KAAKilB,WACdjlB,KAAKyF,MAAK,GAAO,GAGfzF,KAAKqC,MAAM2C,eACbhF,KAAKqC,MAAM2C,cAAcmQ,aAAa,cAAe,SAE3D,GAEA,CAAAva,IAAA,aAAAC,MAGE,WACEmF,KAAKkjB,SAASzgB,SAAS,oBAAqB,CAAEmC,QAAS5E,OACnDA,KAAKqC,OAASrC,KAAKqC,MAAM2C,eAC3BhF,KAAKqC,MAAM2C,cAAcmQ,aAAa,cAAe,OAE3D,GAGA,CAAAva,IAAA,SAAAC,MAGE,WACEmF,KAAKqjB,YAAa,EAEdrjB,KAAKkjB,SAASzgB,SAAS,gBAAiB,CAAEmC,QAAS5E,OAAQgG,mBAI3DhG,KAAK4G,SAAW5G,KAAK4G,QAAQoc,YAC/BhjB,KAAK4G,QAAQT,SAGXnG,KAAK2G,aAAe3G,KAAK2G,YAAYC,SACvC5G,KAAK2G,YAAYC,QAAQT,SAE/B,GAEA,CAAAvL,IAAA,cAAAC,MAGE,WACOmF,KAAKqjB,aAINrjB,KAAKkjB,SAASzgB,SAAS,qBAAsB,CAAEmC,QAAS5E,OAAQgG,mBAKhEhG,KAAKqC,OAASrC,KAAK4G,UAAY5G,KAAK4G,QAAQoc,YAC9ChjB,KAAKqC,MAAM0C,UAAUjI,YAAYkD,KAAK4G,SAGpC5G,KAAKujB,QAAUnkB,GAAqBY,KAAKujB,QAAUnkB,GACrDY,KAAK+kB,qBAEX,KAAG9B,CAAA,CA5fU,GCaN,SAASmD,GAAa1kB,EAAUwhB,EAAUvhB,GAC/C,IAEI0kB,EAFEzhB,EAAUse,EAASoD,sBAAsB5kB,EAAUC,GAIjDV,EAAYiiB,EAAZjiB,QAIR,GAAIA,EAAS,CACXolB,EAAY,IAAIrjB,EAAU/B,EAASS,GAAW,GAS9C,IAAMoB,EAAcX,EAAelB,EAN/BiiB,EAAShiB,KACIgiB,EAAShiB,KAAKO,aAEdT,EAAgBC,EAASiiB,GAGgBxhB,EAAUC,GACpE0kB,EAAUjgB,OAAOxB,EAAQ1F,MAAO0F,EAAQzF,OAAQ2D,EACpD,CAWE,OATA8B,EAAQ2hB,WAEJF,GACFzhB,EAAQ6B,iBACNjJ,KAAKgpB,KAAK5hB,EAAQ1F,MAAQmnB,EAAUhjB,SACpC7F,KAAKgpB,KAAK5hB,EAAQzF,OAASknB,EAAUhjB,UAIlCuB,CACT,CAsBC,IAEK6hB,GAAa,WAIjB,SAAAA,EAAYvlB,IAAMnB,EAAAA,EAAAA,GAAA,KAAA0mB,GAChBzmB,KAAKkB,KAAOA,EAEZlB,KAAK0mB,MAAQlpB,KAAKS,IAChBiD,EAAKD,QAAQ0lB,QAAQ,GAAKzlB,EAAKD,QAAQ0lB,QAAQ,GAAK,EA7E9B,GAiFxB3mB,KAAK4mB,aAAe,EACxB,CA2GG,OAzGH1mB,EAAAA,EAAAA,GAAAumB,EAAA,EAAA7rB,IAAA,aAAAC,MAKE,SAAWkZ,GACT,IAAQ7S,EAASlB,KAATkB,KAER,IAAIA,EAAKuB,SAAS,YAAYuD,iBAA9B,CAIA,IAEI/J,EAFI0qB,EAAYzlB,EAAKD,QAAjB0lB,QACF9N,OAAqBzb,IAAT2W,GAA6BA,GAAQ,EAIvD,IAAK9X,EAAI,EAAGA,GAAK0qB,EAAQ,GAAI1qB,IAC3B+D,KAAK6mB,iBAAiB3lB,EAAKoD,WAAauU,EAAY5c,GAAMA,IAI5D,IAAKA,EAAI,EAAGA,GAAK0qB,EAAQ,GAAI1qB,IAC3B+D,KAAK6mB,iBAAiB3lB,EAAKoD,WAAauU,GAAc5c,EAAKA,GAbjE,CAeA,GAEA,CAAArB,IAAA,mBAAAC,MAGE,SAAiBisB,GACf,IAAMnlB,EAAQ3B,KAAKkB,KAAK2U,eAAeiR,GAEnCliB,EAAU5E,KAAK+mB,kBAAkBplB,GAChCiD,IAEHA,EA7DC,SAAuBjD,EAAOuhB,GACnC,IAAMxhB,EAAWwhB,EAAS8D,YAAYrlB,GAEtC,IAAIuhB,EAASzgB,SAAS,gBAAiB,CAAEd,MAAAA,EAAOD,SAAAA,IAAYsE,iBAI5D,OAAOogB,GAAa1kB,EAAUwhB,EAAUvhB,EAC1C,CAqDgBslB,CAActlB,EAAO3B,KAAKkB,MAEhC0D,GACF5E,KAAKknB,WAAWtiB,GAGxB,GAEA,CAAAhK,IAAA,oBAAAC,MAIE,SAAkBwH,GAChB,IAAIuC,EAAU5E,KAAK+mB,kBAAkB1kB,EAAMV,OAU3C,OATKiD,IAEHA,EAAU5E,KAAKkB,KAAKolB,sBAAsBjkB,EAAMQ,KAAMR,EAAMV,OAC5D3B,KAAKknB,WAAWtiB,IAIlBA,EAAQuiB,SAAS9kB,GAEVuC,CACX,GAEA,CAAAhK,IAAA,aAAAC,MAGE,SAAW+J,GAKT,GAHA5E,KAAKonB,cAAcxiB,EAAQjD,OAC3B3B,KAAK4mB,aAAa/qB,KAAK+I,GAEnB5E,KAAK4mB,aAAazqB,OAAS6D,KAAK0mB,MAAO,CAEzC,IAAMW,EAAgBrnB,KAAK4mB,aAAapT,WAAU,SAAC8T,GACjD,OAAQA,EAAKjE,aAAeiE,EAAKphB,QACzC,IACM,IAAuB,IAAnBmhB,EACkBrnB,KAAK4mB,aAAajT,OAAO0T,EAAe,GAAG,GACnDvL,SAEpB,CACA,GAEA,CAAAlhB,IAAA,gBAAAC,MAKE,SAAc8G,GACZ,IAAM0lB,EAAgBrnB,KAAK4mB,aAAapT,WAAU,SAAA8T,GAAI,OAAIA,EAAK3lB,QAAUA,CAAK,KACvD,IAAnB0lB,GACFrnB,KAAK4mB,aAAajT,OAAO0T,EAAe,EAE9C,GAEA,CAAAzsB,IAAA,oBAAAC,MAIE,SAAkB8G,GAChB,OAAO3B,KAAK4mB,aAAaW,MAAK,SAAA3iB,GAAO,OAAIA,EAAQjD,QAAUA,CAAK,GACpE,GAAG,CAAA/G,IAAA,UAAAC,MAED,WACEmF,KAAK4mB,aAAavqB,SAAQ,SAAAuI,GAAO,OAAIA,EAAQkX,SAAS,IACtD9b,KAAK4mB,aAAe,EACxB,KAAGH,CAAA,CAxHgB,GClEbe,GAAc,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,OAAAznB,EAAAA,EAAAA,GAAA,KAAAynB,GAAAG,EAAA7rB,MAAA,KAAAI,UAAA,CA0KjB,OA1KiBgE,EAAAA,EAAAA,GAAAsnB,EAAA,EAAA5sB,IAAA,cAAAC,MAMlB,WAAc,IAAAgtB,EACRC,EAAW,EACTC,EAAyB,QAAfF,EAAG7nB,KAAKiB,eAAO,IAAA4mB,OAAA,EAAZA,EAAcE,WAE7BA,GAAc,WAAYA,EAE5BD,EAAWC,EAAW5rB,OACb4rB,GAAc,YAAaA,IAE/BA,EAAWhI,QACdgI,EAAWhI,MAAQ/f,KAAKgoB,uBAAuBD,EAAWE,UAGxDF,EAAWhI,QACb+H,EAAWC,EAAWhI,MAAM5jB,SAKhC,IAAM6R,EAAQhO,KAAKyC,SAAS,WAAY,CACtCslB,WAAAA,EACAD,SAAAA,IAEF,OAAO9nB,KAAKge,aAAa,WAAYhQ,EAAM8Z,SAAUC,EACzD,GAEA,CAAAntB,IAAA,wBAAAC,MAKE,SAAsBkJ,EAAWpC,GAC/B,OAAO,IAAIshB,GAAQlf,EAAW/D,KAAM2B,EACxC,GAEA,CAAA/G,IAAA,cAAAC,MAUE,SAAY8G,GAAO,IAAAumB,EACXH,EAAyB,QAAfG,EAAGloB,KAAKiB,eAAO,IAAAinB,OAAA,EAAZA,EAAcH,WAE7BI,EAAiB,CAAC,EAClBlG,MAAMmG,QAAQL,GAEhBI,EAAiBJ,EAAWpmB,GACnBomB,GAAc,YAAaA,IAM/BA,EAAWhI,QACdgI,EAAWhI,MAAQ/f,KAAKgoB,uBAAuBD,EAAWE,UAG5DE,EAAiBJ,EAAWhI,MAAMpe,IAGpC,IAAID,EAAWymB,EAEXzmB,aAAoB2mB,UACtB3mB,EAAW1B,KAAKsoB,sBAAsB5mB,IAKxC,IAAMsM,EAAQhO,KAAKyC,SAAS,WAAY,CACtCf,SAAUA,GAAY,CAAC,EACvBC,MAAAA,IAGF,OAAO3B,KAAKge,aAAa,WAAYhQ,EAAMtM,SAAUC,EACzD,GAEA,CAAA/G,IAAA,yBAAAC,MAOE,SAAuB0tB,GAAgB,IAAAC,EAAAC,EACrC,OAAgB,QAAZD,EAAAxoB,KAAKiB,eAAO,IAAAunB,GAAZA,EAAcE,UAAwB,QAAhBD,EAAIzoB,KAAKiB,eAAO,IAAAwnB,GAAZA,EAAcE,c5BuFzC,SAA+BC,EAAQC,GAAmC,IAAnBC,EAAM5sB,UAAAC,OAAA,QAAAiB,IAAAlB,UAAA,GAAAA,UAAA,GAAGW,SAEjEksB,EAAW,GAEf,GAAIH,aAAkBP,QACpBU,EAAW,CAACH,QACP,GAAIA,aAAkBI,UAAY/G,MAAMmG,QAAQQ,GACrDG,EAAW9G,MAAMgH,KAAKL,OACjB,CACL,IAAMM,EAA6B,kBAAXN,EAAsBA,EAASC,EACnDK,IACFH,EAAW9G,MAAMgH,KAAKH,EAAOK,iBAAiBD,IAEpD,CAEE,OAAOH,CACT,C4BtGaK,CACLppB,KAAKiB,QAAQynB,SACb1oB,KAAKiB,QAAQ0nB,cACbJ,IACG,GAGA,CAACA,EACZ,GAEA,CAAA3tB,IAAA,wBAAAC,MAME,SAAsB+L,GAEpB,IAAMlF,EAAW,CACfkF,QAAAA,GAGIyiB,EACgB,MAApBziB,EAAQlK,QACJkK,EACAA,EAAQ0iB,cAAc,KAG5B,GAAID,EAAQ,CAGV3nB,EAASohB,IAAMuG,EAAOhE,QAAQkE,SAAWF,EAAOG,KAE5CH,EAAOhE,QAAQoE,aACjB/nB,EAAS+iB,OAAS4E,EAAOhE,QAAQoE,YAGnC/nB,EAASxC,MAAQmqB,EAAOhE,QAAQqE,UAAYnE,SAAS8D,EAAOhE,QAAQqE,UAAW,IAAM,EACrFhoB,EAASvC,OAASkqB,EAAOhE,QAAQsE,WAAapE,SAAS8D,EAAOhE,QAAQsE,WAAY,IAAM,EAGxFjoB,EAAS1C,EAAI0C,EAASxC,MACtBwC,EAASzC,EAAIyC,EAASvC,OAElBkqB,EAAOhE,QAAQuE,WACjBloB,EAASvB,KAAOkpB,EAAOhE,QAAQuE,UAGjC,IAEiBC,EAFXC,EAAcljB,EAAQ0iB,cAAc,OAE1C,GAAIQ,EAGFpoB,EAASuiB,KAAO6F,EAAYC,YAAcD,EAAYhH,IACtDphB,EAASmhB,IAAqC,QAAlCgH,EAAGC,EAAYE,aAAa,cAAM,IAAAH,EAAAA,EAAI,IAGhDR,EAAOhE,QAAQ4E,aAAeZ,EAAOhE,QAAQ6E,WAC/CxoB,EAASyoB,cAAe,EAEhC,CAEI,OAAOnqB,KAAKge,aAAa,cAAetc,EAAUkF,EAASyiB,EAC/D,GAEA,CAAAzuB,IAAA,eAAAC,MAOE,SAAa6G,EAAUC,GACrB,OAAOykB,GAAa1kB,EAAU1B,KAAM2B,EACxC,KAAG6lB,CAAA,CA1KiB,CAASvG,ICGvBmJ,GAAc,KAOdC,GAAM,WAIV,SAAAA,EAAYnpB,IAAMnB,EAAAA,EAAAA,GAAA,KAAAsqB,GAChBrqB,KAAKkB,KAAOA,EACZlB,KAAKsqB,UAAW,EAChBtqB,KAAK2E,QAAS,EACd3E,KAAK2gB,WAAY,EACjB3gB,KAAKuqB,WAAY,EAKjBvqB,KAAKwqB,eAAYptB,EAEjB4C,KAAKyqB,eAAgB,EAErBzqB,KAAK0qB,cAAe,EAEpB1qB,KAAK2qB,qBAAsB,EAE3B3qB,KAAK4qB,mBAAoB,EAKzB5qB,KAAK6qB,kBAAeztB,EAKpB4C,KAAK8qB,qBAAkB1tB,EAKvB4C,KAAK+qB,qBAAkB3tB,EAKvB4C,KAAKgrB,qBAAkB5tB,EAMvB4C,KAAKirB,kBAAe7tB,EAGpB4C,KAAKkrB,aAAelrB,KAAKkrB,aAAaxa,KAAK1Q,MAG3CkB,EAAKmP,GAAG,eAAgBrQ,KAAKkrB,aACjC,CAyXG,OAzXAhrB,EAAAA,EAAAA,GAAAmqB,EAAA,EAAAzvB,IAAA,OAAAC,MAED,WACEmF,KAAKkrB,eACLlrB,KAAKyb,QACT,GAAG,CAAA7gB,IAAA,QAAAC,MAED,WAAQ,IAAAswB,EAAA,KACN,KAAInrB,KAAKsqB,UAAYtqB,KAAK2gB,WAAa3gB,KAAKuqB,WAA5C,CAOA,IAAMloB,EAAQrC,KAAKkB,KAAKwH,UAExB1I,KAAK2E,QAAS,EACd3E,KAAKuqB,WAAY,EACjBvqB,KAAK2gB,WAAY,EACjB3gB,KAAKwqB,UAAYxqB,KAAKkB,KAAKD,QAAQmqB,sBAE/B/oB,GAASA,EAAMC,cAAgBD,EAAMnD,OAASc,KAAKkB,KAAKD,QAAQoqB,oBAClErrB,KAAKwqB,UAAY,GAGnBxqB,KAAKsrB,mBACLtY,YAAW,WACTmY,EAAK1P,QACX,GAAOzb,KAAK0qB,aAAe,GAAK,EAhBhC,CAiBA,GAEA,CAAA9vB,IAAA,eAAAC,MACE,WAEE,GADAmF,KAAKkB,KAAKohB,IAAI,eAAgBtiB,KAAKkrB,eAC9BlrB,KAAKuqB,UAAW,CACnB,IAAMloB,EAAQrC,KAAKkB,KAAKwH,UACxB1I,KAAKuqB,WAAY,EACjBvqB,KAAK2gB,WAAY,EACjB3gB,KAAKwqB,UAAYxqB,KAAKkB,KAAKD,QAAQsqB,sBAC/BlpB,GAASA,EAAMyB,WAAWT,QAAUhB,EAAMnD,OAASc,KAAKkB,KAAKD,QAAQoqB,oBACvErrB,KAAKwqB,UAAY,GAEnBxqB,KAAKsrB,kBACX,CACA,GAEA,CAAA1wB,IAAA,mBAAAC,MACE,WACE,IAkCO2wB,EAoBoEC,EAtDnEvqB,EAASlB,KAATkB,KACFmB,EAAQrC,KAAKkB,KAAKwH,UAChBzH,EAAYC,EAAZD,SAE8B,SAAlCA,EAAQyqB,uBACVzqB,EAAQ0qB,iBAAkB,EAC1B3rB,KAAKirB,kBAAe7tB,GACuB,SAAlC6D,EAAQyqB,uBACjBzqB,EAAQ0qB,iBAAkB,EAC1B3rB,KAAKwqB,UAAY,EACjBxqB,KAAKirB,kBAAe7tB,GACX4C,KAAKuqB,WAAarpB,EAAK0qB,oBAEhC5rB,KAAKirB,aAAe/pB,EAAK0qB,oBAEzB5rB,KAAKirB,aAAejrB,KAAKkB,KAAK2qB,iBAGhC7rB,KAAK6qB,aAAoB,OAALxoB,QAAK,IAALA,OAAK,EAALA,EAAOypB,wBAE3B5qB,EAAKiG,WAAW6B,UAGhBhJ,KAAKyqB,cAAgBjiB,QAAQxI,KAAKwqB,WAAaxqB,KAAKwqB,UAAY,IAChExqB,KAAK+rB,aAAevjB,QAAQxI,KAAKirB,gBACL,OAAL5oB,QAAK,IAALA,OAAK,EAALA,EAAOuC,QAAQgf,qBACb5jB,KAAK2gB,YAAczf,EAAK4E,WAAWC,aACvD/F,KAAK+rB,cAQR/rB,KAAK2qB,oBAA6C,QAA1Ba,EAAGvqB,EAAQ0qB,uBAAe,IAAAH,GAAAA,GAPlDxrB,KAAK2qB,qBAAsB,EAEvB3qB,KAAKuqB,WAAaloB,IACpBA,EAAMuD,sBACNvD,EAAMwD,wBAQV,GAHA7F,KAAK4qB,mBAAqB5qB,KAAK2qB,qBAAuB3qB,KAAKkB,KAAKD,QAAQsI,UAAY6gB,GACpFpqB,KAAK8qB,gBAAkB9qB,KAAK2qB,oBAAsBzpB,EAAK0F,QAAU1F,EAAK8qB,IAEjEhsB,KAAKyqB,cAWR,OAVAzqB,KAAKwqB,UAAY,EACjBxqB,KAAK+rB,cAAe,EACpB/rB,KAAK4qB,mBAAoB,EACzB5qB,KAAK2qB,qBAAsB,OACvB3qB,KAAKuqB,YACHrpB,EAAK0F,UACP1F,EAAK0F,QAAQrI,MAAM0tB,QAAUxG,OAAO2E,KAEtClpB,EAAKuI,eAAe,KAKpBzJ,KAAK+rB,cAAgB/rB,KAAKirB,cAAgBjrB,KAAKirB,aAAaiB,WAE9DlsB,KAAK0qB,cAAe,EACpB1qB,KAAK+qB,gBAAkB/qB,KAAKkB,KAAK6D,UACjC/E,KAAKgrB,gBAAqC,QAAtBS,EAAGzrB,KAAKkB,KAAKwH,iBAAS,IAAA+iB,OAAA,EAAnBA,EAAqBzmB,cAExC9D,EAAK6D,YACP7D,EAAK6D,UAAUxG,MAAM4tB,SAAW,SAChCjrB,EAAK6D,UAAUxG,MAAMW,MAAQgC,EAAKO,aAAavE,EAAI,OAGrD8C,KAAK0qB,cAAe,EAGlB1qB,KAAKuqB,WAEHvqB,KAAK2qB,qBACHzpB,EAAK0F,UACP1F,EAAK0F,QAAQrI,MAAM0tB,QAAUxG,OAAO2E,KAEtClpB,EAAKuI,eAAe,KAEhBzJ,KAAK4qB,mBAAqB1pB,EAAK8qB,KACjC9qB,EAAK8qB,GAAGztB,MAAM0tB,QAAUxG,OAAO2E,KAE7BlpB,EAAK0F,UACP1F,EAAK0F,QAAQrI,MAAM0tB,QAAU,MAI7BjsB,KAAK+rB,eACP/rB,KAAKosB,yBACDpsB,KAAK6qB,eAEP7qB,KAAK6qB,aAAatsB,MAAM8tB,WAAa,YAIrCrsB,KAAK6qB,aAAatsB,MAAM0tB,QAAUxG,OAAO2E,OAGpCpqB,KAAK2gB,YAGVzf,EAAK4E,WAAW6O,YAAY,KAC9BzT,EAAK4E,WAAW6O,YAAY,GAAG/X,GAAG2B,MAAM6W,QAAU,QAEhDlU,EAAK4E,WAAW6O,YAAY,KAC9BzT,EAAK4E,WAAW6O,YAAY,GAAG/X,GAAG2B,MAAM6W,QAAU,QAGhDpV,KAAK0qB,cACmB,IAAtBxpB,EAAK4E,WAAW5I,IAElBgE,EAAK4E,WAAW+Q,gBAChB3V,EAAK4E,WAAWoP,UAI1B,GAEA,CAAAta,IAAA,SAAAC,MACE,WAAS,IAAAyxB,EAAA,KACHtsB,KAAKuqB,WACFvqB,KAAKyqB,eACLzqB,KAAK6qB,cACyB,QAA9B7qB,KAAK6qB,aAAanuB,QAOvB,IAAI6vB,SAAQ,SAACC,GACX,I7BxGoBC,E6BwGhBC,GAAU,EACVC,GAAa,G7BzGGF,E6B0GyBH,EAAKzB,a7BzGpD,WAAY4B,EACPA,EAAIzG,SAASC,OAAM,WAAO,IAG/BwG,EAAI/H,SACC6H,QAAQC,QAAQC,GAGlB,IAAIF,SAAQ,SAACC,EAASI,GAC3BH,EAAI7H,OAAS,kBAAM4H,EAAQC,EAAI,EAC/BA,EAAI5H,QAAU+H,CAClB,K6B8FyE1G,SAAQ,WACvEwG,GAAU,EACLC,GACHH,GAAQ,EAEpB,IACQxZ,YAAW,WACT2Z,GAAa,EACTD,GACFF,GAAQ,EAEpB,GAAW,IACHxZ,WAAWwZ,EAAS,IAC5B,IAAStG,SAAQ,kBAAMoG,EAAKO,WAAW,IAEjC7sB,KAAK6sB,WAEX,GAEA,CAAAjyB,IAAA,YAAAC,MACE,WAAY,IAAAiyB,EAAAC,EACO,QAAjBD,EAAA9sB,KAAKkB,KAAK0F,eAAO,IAAAkmB,GAAjBA,EAAmBvuB,MAAMyuB,YAAY,6BAA8BhtB,KAAKwqB,UAAY,MAEpFxqB,KAAKkB,KAAKuB,SACRzC,KAAKuqB,UAAY,wBAA0B,yBAI7CvqB,KAAKkB,KAAKuB,SAEP,eAAiBzC,KAAKuqB,UAAY,KAAO,QAG3B,QAAjBwC,EAAA/sB,KAAKkB,KAAK0F,eAAO,IAAAmmB,GAAjBA,EAAmB1e,UAAUU,OAAO,mBAAoB/O,KAAKuqB,WAEzDvqB,KAAKuqB,WACHvqB,KAAK6qB,eAEP7qB,KAAK6qB,aAAatsB,MAAM0tB,QAAU,KAEpCjsB,KAAKitB,uBACIjtB,KAAK2gB,WACd3gB,KAAKktB,wBAGFltB,KAAKyqB,eACRzqB,KAAKmtB,sBAEX,GAEA,CAAAvyB,IAAA,uBAAAC,MACE,WACE,IAAQqG,EAASlB,KAATkB,KAgBR,GAfAlB,KAAK2E,OAAS3E,KAAKuqB,UACnBvqB,KAAKsqB,SAAWtqB,KAAK2gB,UACrB3gB,KAAKuqB,WAAY,EACjBvqB,KAAK2gB,WAAY,EAEjBzf,EAAKuB,SACHzC,KAAK2E,OAAS,sBAAwB,uBAIxCzD,EAAKuB,SAEF,eAAiBzC,KAAK2E,OAAS,QAAU,WAGxC3E,KAAKsqB,SACPppB,EAAK4a,eACA,GAAI9b,KAAK2E,OAAQ,KAAAyoB,EAClBptB,KAAK+rB,cAAgB7qB,EAAK6D,YAC5B7D,EAAK6D,UAAUxG,MAAM4tB,SAAW,UAChCjrB,EAAK6D,UAAUxG,MAAMW,MAAQ,QAEjB,QAAdkuB,EAAAlsB,EAAKwH,iBAAS,IAAA0kB,GAAdA,EAAgBvnB,qBACtB,CACA,GAEA,CAAAjL,IAAA,sBAAAC,MACE,WACE,IAAQqG,EAASlB,KAATkB,KACJlB,KAAK+rB,eACH/rB,KAAK0qB,cAAgB1qB,KAAK+qB,iBAAmB/qB,KAAKgrB,kBACpDhrB,KAAKqtB,WAAWrtB,KAAK+qB,gBAAiB,YAAa,sBACnD/qB,KAAKqtB,WAAWrtB,KAAKgrB,gBAAiB,YAAa,SAGjD9pB,EAAKwH,YACPxH,EAAKwH,UAAU9C,sBACf5F,KAAKqtB,WACHnsB,EAAKwH,UAAU3D,UACf,YACA7D,EAAKwH,UAAUb,yBAKjB7H,KAAK4qB,mBAAqB1pB,EAAK8qB,IACjChsB,KAAKqtB,WAAWnsB,EAAK8qB,GAAI,UAAWvG,OAAOvkB,EAAKD,QAAQsI,YAGtDvJ,KAAK2qB,qBAAuBzpB,EAAK0F,SACnC5G,KAAKqtB,WAAWnsB,EAAK0F,QAAS,UAAW,IAE/C,GAEA,CAAAhM,IAAA,wBAAAC,MACE,WACE,IAAQqG,EAASlB,KAATkB,KAEJlB,KAAK+rB,cACP/rB,KAAKosB,wBAAuB,GAI1BpsB,KAAK4qB,mBAAqB1pB,EAAKqI,UAAY,KAAQrI,EAAK8qB,IAC1DhsB,KAAKqtB,WAAWnsB,EAAK8qB,GAAI,UAAW,KAGlChsB,KAAK2qB,qBAAuBzpB,EAAK0F,SACnC5G,KAAKqtB,WAAWnsB,EAAK0F,QAAS,UAAW,IAE/C,GAEA,CAAAhM,IAAA,yBAAAC,MAIE,SAAuBya,GACrB,GAAKtV,KAAKirB,aAAV,CAEA,IAAQ/pB,EAASlB,KAATkB,KACAgrB,EAAclsB,KAAKirB,aAAnBiB,UACAxjB,EAA4BxH,EAA5BwH,UAAWjH,EAAiBP,EAAjBO,aAEnB,GAAIzB,KAAK0qB,cAAgBwB,GAAalsB,KAAK+qB,iBAAmB/qB,KAAKgrB,gBAAiB,CAClF,IAAMsC,GAAoB7rB,EAAavE,GAAK8C,KAAKirB,aAAa/tB,EAAIgvB,EAAUhvB,GAAKgvB,EAAUltB,EACrFuuB,GAAoB9rB,EAAatE,GAAK6C,KAAKirB,aAAa9tB,EAAI+uB,EAAU/uB,GAAK+uB,EAAUjtB,EACrFuuB,EAAmB/rB,EAAavE,EAAIgvB,EAAUltB,EAC9CyuB,EAAmBhsB,EAAatE,EAAI+uB,EAAUjtB,EAGhDqW,GACFtV,KAAKqtB,WACHrtB,KAAK+qB,gBACL,YACA7sB,EAAkBovB,EAAkBC,IAGtCvtB,KAAKqtB,WACHrtB,KAAKgrB,gBACL,YACA9sB,EAAkBsvB,EAAkBC,MAGtCnvB,EAAa0B,KAAK+qB,gBAAiBuC,EAAkBC,GACrDjvB,EAAa0B,KAAKgrB,gBAAiBwC,EAAkBC,GAE7D,CAEQ/kB,IACF3L,EAAe2L,EAAUlE,IAAK0nB,GAAalsB,KAAKirB,cAChDviB,EAAUpG,cAAgBtC,KAAKirB,aAAajsB,EAAI0J,EAAUxJ,MACtDoW,EACFtV,KAAKqtB,WAAW3kB,EAAU3D,UAAW,YAAa2D,EAAUb,uBAE5Da,EAAU7C,sBArCgB,CAwClC,GAEA,CAAAjL,IAAA,aAAAC,MAME,SAAWmB,EAAQ2C,EAAMP,GAAW,IAAAsvB,EAAA,KAClC,GAAK1tB,KAAKwqB,UAAV,CAKA,IAAQrjB,EAAenH,KAAKkB,KAApBiG,WAEFwmB,EAAY,CAChB/uB,SAAUoB,KAAKwqB,UACfziB,OAAQ/H,KAAKkB,KAAKD,QAAQ8G,OAC1BD,WAAY,WACLX,EAAWqU,iBAAiBrf,QAC/BuxB,EAAKP,sBAEf,EACMnxB,OAAAA,GAEF2xB,EAAUhvB,GAAQP,EAClB+I,EAAWO,gBAAgBimB,EAf/B,MAFM3xB,EAAOuC,MAAMI,GAAQP,CAkB3B,KAAGisB,CAAA,CAhbS,GCyMNuD,GAAiB,CACrB7hB,gBAAgB,EAChBgJ,QAAS,GACToJ,MAAM,EACN/Q,cAAc,EACdhE,qBAAqB,EACrBgiB,sBAAuB,IACvBG,sBAAuB,IACvBtjB,sBAAuB,IACvB8Q,QAAQ,EACRC,WAAW,EACXX,aAAa,EACbgT,kBAAmB,IACnBvc,yBAAyB,EACzB+R,iBAAkB,gBAClBgN,cAAe,QACfC,UAAW,kBACXhb,gBAAiB,OACjB2M,kBAAmB,MACnBL,eAAgB,IAChB7V,UAAW,GAEX5H,MAAO,EACPkkB,SAAU,6BACVc,QAAS,CAAC,EAAG,GACb5e,OAAQ,4BAMJgmB,GAAU,SAAAC,IAAAtG,EAAAA,EAAAA,GAAAqG,EAAAC,GAAA,IAAAC,GAAArG,EAAAA,EAAAA,GAAAmG,GAId,SAAAA,EAAY9sB,GAAS,IAAAitB,EA8D0B,OA9D1BnuB,EAAAA,EAAAA,GAAA,KAAAguB,IACnBG,EAAAD,EAAAjf,KAAA,OAEK/N,QAAUitB,EAAKC,gBAAgBltB,GAAW,CAAC,GAOhDitB,EAAKha,OAAS,CAAEhX,EAAG,EAAGC,EAAG,GAMzB+wB,EAAKE,kBAAoB,CAAElxB,EAAG,EAAGC,EAAG,GAOpC+wB,EAAKzsB,aAAe,CAAEvE,EAAG,EAAGC,EAAG,GAK/B+wB,EAAK3kB,UAAY,EACjB2kB,EAAK5pB,UAAY,EACjB4pB,EAAKxY,eAAiB,EACtBwY,EAAKvpB,QAAS,EACdupB,EAAKG,cAAe,EACpBH,EAAKI,UAAW,EAMhBJ,EAAKK,iBAAmB,CAAC,EAEzBL,EAAKtC,yBAAsBxuB,EAG3B8wB,EAAKnQ,YAAS3gB,EAEd8wB,EAAKtnB,aAAUxJ,EAEf8wB,EAAKjV,cAAW7b,EAEhB8wB,EAAKnpB,eAAY3H,EAEjB8wB,EAAK1d,gBAAapT,EAElB8wB,EAAKxlB,eAAYtL,EAEjB8wB,EAAK5d,OAAS,IAAIxQ,EAClBouB,EAAK/mB,WAAa,IAAIoU,EACtB2S,EAAKpoB,WAAa,IAAIwO,GAAUka,EAAAA,EAAAA,GAAAN,IAChCA,EAAKplB,SAAW,IAAImG,GAAQuf,EAAAA,EAAAA,GAAAN,IAC5BA,EAAKxpB,OAAS,IAAI2lB,IAAMmE,EAAAA,EAAAA,GAAAN,IACxBA,EAAKO,SAAW,IAAI7W,GAAQ4W,EAAAA,EAAAA,GAAAN,IAC5BA,EAAKrpB,cAAgB,IAAI4hB,IAAa+H,EAAAA,EAAAA,GAAAN,IAAOA,CACjD,CA6dG,OA3dHhuB,EAAAA,EAAAA,GAAA6tB,EAAA,EAAAnzB,IAAA,OAAAC,MACE,WAAO,IAAA6zB,EAAA,KACL,GAAI1uB,KAAK2E,QAAU3E,KAAKquB,aACtB,OAAO,EAGTruB,KAAK2E,QAAS,EACd3E,KAAKyC,SAAS,QACdzC,KAAKyC,SAAS,cAEdzC,KAAK2uB,uBAGL,IAAIC,EAAc,aA8ElB,OA7EI5uB,KAAK8I,SAAS6G,gBAChBif,GAAe,gBAEb5uB,KAAKiB,QAAQ4tB,YACfD,GAAe,IAAM5uB,KAAKiB,QAAQ4tB,WAEhC7uB,KAAK4G,UACP5G,KAAK4G,QAAQnK,WAAa,IAAMmyB,GAGlC5uB,KAAKsE,UAAYtE,KAAKiB,QAAQU,OAAS,EACvC3B,KAAK0V,eAAiB1V,KAAKsE,UAC3BtE,KAAKyC,SAAS,eAGdzC,KAAK8uB,YAAc,IAAI9S,EAAYhc,OAG/BkC,OAAO6sB,MAAM/uB,KAAKsE,YACftE,KAAKsE,UAAY,GACjBtE,KAAKsE,WAAatE,KAAKqV,iBAC5BrV,KAAKsE,UAAY,GAGdtE,KAAK8I,SAAS6G,eAEjB3P,KAAKyR,gBAIPzR,KAAKgvB,aAELhvB,KAAKkU,OAAO/W,EAAIuC,OAAOuvB,YAEvBjvB,KAAKuuB,iBAAmBvuB,KAAKgnB,YAAYhnB,KAAKsE,WAC9CtE,KAAKyC,SAAS,cAAe,CAC3Bd,MAAO3B,KAAKsE,UACZzB,KAAM7C,KAAKuuB,iBACXlsB,WAAOjF,IAIT4C,KAAK4rB,oBAAsB5rB,KAAK6rB,iBAChC7rB,KAAKyC,SAAS,iBAEdzC,KAAKqQ,GAAG,uBAAuB,WAC7B,IAAQsE,EAAgB+Z,EAAK5oB,WAArB6O,YAGJA,EAAY,KACdA,EAAY,GAAG/X,GAAG2B,MAAM6W,QAAU,QAClCsZ,EAAKhY,WAAW/B,EAAY,GAAI+Z,EAAKpqB,UAAY,IAE/CqQ,EAAY,KACdA,EAAY,GAAG/X,GAAG2B,MAAM6W,QAAU,QAClCsZ,EAAKhY,WAAW/B,EAAY,GAAI+Z,EAAKpqB,UAAY,IAGnDoqB,EAAK/oB,cAEL+oB,EAAK7pB,cAAckS,aAEnB2X,EAAKpe,OAAOC,IAAI7Q,OAAQ,SAAUgvB,EAAKQ,kBAAkBxe,KAAKge,IAC9DA,EAAKpe,OAAOC,IAAI7Q,OAAQ,SAAUgvB,EAAKS,wBAAwBze,KAAKge,IACpEA,EAAKjsB,SAAS,aACpB,IAGQzC,KAAK8F,WAAW6O,YAAY,IAC9B3U,KAAK0W,WAAW1W,KAAK8F,WAAW6O,YAAY,GAAI3U,KAAKsE,WAEvDtE,KAAKyC,SAAS,UAEdzC,KAAK0E,OAAO0qB,OAEZpvB,KAAKyC,SAAS,cAEP,CACX,GAEA,CAAA7H,IAAA,iBAAAC,MAOE,SAAe8G,GACb,IAAMgU,EAAY3V,KAAKqV,cAYvB,OAVIrV,KAAKiB,QAAQkd,OACXxc,EAAQgU,EAAY,IACtBhU,GAASgU,GAGPhU,EAAQ,IACVA,GAASgU,IAIN7X,EAAM6D,EAAO,EAAGgU,EAAY,EACvC,GAAG,CAAA/a,IAAA,cAAAC,MAED,WACEmF,KAAK8F,WAAW6O,YAAYtY,SAAQ,SAAC4Y,GAAe,IAAAoa,EAClC,QAAhBA,EAAApa,EAAW5S,aAAK,IAAAgtB,GAAhBA,EAAkB1pB,aACxB,GACA,GAEA,CAAA/K,IAAA,OAAAC,MAIE,SAAK8G,GACH3B,KAAK8F,WAAWkE,YACdhK,KAAK6V,eAAelU,GAAS3B,KAAK0V,eAExC,GAEA,CAAA9a,IAAA,OAAAC,MAGE,WACEmF,KAAKsvB,KAAKtvB,KAAK0V,eAAiB,EACpC,GAEA,CAAA9a,IAAA,OAAAC,MAGE,WACEmF,KAAKsvB,KAAKtvB,KAAK0V,eAAiB,EACpC,GAEA,CAAA9a,IAAA,SAAAC,MAKE,WAAgB,QAAA00B,EAAAC,EAAAtzB,UAAAC,OAAN6lB,EAAI,IAAAC,MAAAuN,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJzN,EAAIyN,GAAAvzB,UAAAuzB,GACE,QAAdF,EAAAvvB,KAAK0I,iBAAS,IAAA6mB,GAAdA,EAAgBvnB,OAAMlM,MAAAyzB,EAAIvN,EAC9B,GAEA,CAAApnB,IAAA,aAAAC,MAGE,WAAa,IAAA60B,EACG,QAAdA,EAAA1vB,KAAK0I,iBAAS,IAAAgnB,GAAdA,EAAgB7gB,YACpB,GAEA,CAAAjU,IAAA,QAAAC,MAIE,WACOmF,KAAK0E,OAAOC,SAAU3E,KAAKquB,eAIhCruB,KAAKquB,cAAe,EAEpBruB,KAAKyC,SAAS,SAEdzC,KAAKsQ,OAAOqf,YACZ3vB,KAAK0E,OAAOkG,QAChB,GAEA,CAAAhQ,IAAA,UAAAC,MAOE,WAAU,IAAA+0B,EACR,IAAK5vB,KAAKquB,aAGR,OAFAruB,KAAKiB,QAAQyqB,sBAAwB,YACrC1rB,KAAK4K,QAIP5K,KAAKyC,SAAS,WAEdzC,KAAKkhB,WAAa,CAAC,EAEflhB,KAAKwQ,aACPxQ,KAAKwQ,WAAWI,YAAc,KAC9B5Q,KAAKwQ,WAAWK,WAAa,MAGnB,QAAZ+e,EAAA5vB,KAAK4G,eAAO,IAAAgpB,GAAZA,EAAczpB,SAEdnG,KAAK8F,WAAW6O,YAAYtY,SAAQ,SAAC4Y,GAAe,IAAA4a,EAClC,QAAhBA,EAAA5a,EAAW5S,aAAK,IAAAwtB,GAAhBA,EAAkB/T,SACxB,IAEI9b,KAAK6E,cAAciX,UACnB9b,KAAKsQ,OAAOqf,WAChB,GAEA,CAAA/0B,IAAA,sBAAAC,MAKE,SAAoBi1B,GAAY,IAAAC,EAAA,KAC9B/vB,KAAK6E,cAAcuiB,cAAc0I,GACjC9vB,KAAK8F,WAAW6O,YAAYtY,SAAQ,SAAC4Y,EAAYhZ,GAAM,IAAA+zB,EAAAC,EAUtCC,EATXC,GAA6C,QAAtBH,EAAe,QAAfC,EAACF,EAAKrnB,iBAAS,IAAAunB,OAAA,EAAdA,EAAgBtuB,aAAK,IAAAquB,EAAAA,EAAI,GAAK,EAAI/zB,GAC1D8zB,EAAKna,YACPua,EAAuBJ,EAAKla,eAAesa,IAEzCA,IAAyBL,KAE3BC,EAAKrZ,WAAWzB,EAAY6a,GAAY,GAG9B,IAAN7zB,IACF8zB,EAAKrnB,UAAYuM,EAAW5S,MACZ,QAAhB6tB,EAAAjb,EAAW5S,aAAK,IAAA6tB,GAAhBA,EAAkBpZ,aAAY,IAGxC,IAEI9W,KAAKyC,SAAS,SAClB,GAGA,CAAA7H,IAAA,aAAAC,MAOE,SAAWu1B,EAAQzuB,EAAO2E,GAKxB,GAJItG,KAAK4V,YACPjU,EAAQ3B,KAAK6V,eAAelU,IAG1ByuB,EAAO/tB,MAAO,CAChB,GAAI+tB,EAAO/tB,MAAMV,QAAUA,IAAU2E,EAGnC,OAIF8pB,EAAO/tB,MAAMyZ,UACbsU,EAAO/tB,WAAQjF,CACrB,CAGI,GAAK4C,KAAK4V,aAAcjU,EAAQ,GAAKA,GAAS3B,KAAKqV,eAAnD,CAIA,IAAM3T,EAAW1B,KAAKgnB,YAAYrlB,GAClCyuB,EAAO/tB,MAAQ,IAAI+B,EAAM1C,EAAUC,EAAO3B,MAGtC2B,IAAU3B,KAAKsE,YACjBtE,KAAK0I,UAAY0nB,EAAO/tB,OAG1B+tB,EAAO/tB,MAAM4D,OAAOmqB,EAAOxzB,GAV/B,CAWA,GAEA,CAAAhC,IAAA,yBAAAC,MACE,WACE,MAAO,CACLqC,EAAG8C,KAAKyB,aAAavE,EAAI,EACzBC,EAAG6C,KAAKyB,aAAatE,EAAI,EAE/B,GAEA,CAAAvC,IAAA,aAAAC,MAME,SAAWyL,GAIT,IAAItG,KAAKquB,aAAT,CASA,IAAMjtB,EAAkBJ,EAAgBhB,KAAKiB,QAASjB,OAEjDsG,GAASzI,EAAYuD,EAAiBpB,KAAKouB,qBAOhDrxB,EAAeiD,KAAKouB,kBAAmBhtB,GAEvCpB,KAAKyC,SAAS,gBAEd1F,EAAeiD,KAAKyB,aAAczB,KAAKouB,mBAEvCpuB,KAAKmvB,0BAELnvB,KAAKyC,SAAS,gBAIdzC,KAAK8F,WAAWoP,OAAOlV,KAAK0E,OAAOC,SAE9B3E,KAAKsuB,UAAY5uB,OAAO2wB,WAAW,sBAAsBC,SAC5DtwB,KAAKyR,gBAGPzR,KAAKyC,SAAS,UAhClB,CAiCA,GAEA,CAAA7H,IAAA,iBAAAC,MAGE,SAAeoxB,GACbjsB,KAAKuJ,UAAY/L,KAAKS,IAAIguB,EAAS,GAC/BjsB,KAAKgsB,KACPhsB,KAAKgsB,GAAGztB,MAAM0tB,QAAUxG,OAAOzlB,KAAKuJ,UAAYvJ,KAAKiB,QAAQsI,WAEnE,GAEA,CAAA3O,IAAA,gBAAAC,MAGE,WACsB,IAAA01B,EAAfvwB,KAAKsuB,WACRtuB,KAAKsuB,UAAW,EACJ,QAAZiC,EAAAvwB,KAAK4G,eAAO,IAAA2pB,GAAZA,EAAcliB,UAAUkC,IAAI,mBAElC,GAEA,CAAA3V,IAAA,oBAAAC,MAKE,WAAoB,IAAA21B,EAAA,KAClBxwB,KAAKgvB,aAOD,oBAAoByB,KAAK/wB,OAAOJ,UAAUoxB,YAC5C1d,YAAW,WACTwd,EAAKxB,YACb,GAAS,IAET,GAEA,CAAAp0B,IAAA,0BAAAC,MAOE,WACEmF,KAAK2wB,gBAAgB,EAAGjxB,OAAOuvB,YACnC,GAEA,CAAAr0B,IAAA,kBAAAC,MAIE,SAAgBqC,EAAGC,GACjB6C,KAAKkU,OAAOhX,EAAIA,EAChB8C,KAAKkU,OAAO/W,EAAIA,EAChB6C,KAAKyC,SAAS,qBAClB,GAEA,CAAA7H,IAAA,uBAAAC,MAME,WAEEmF,KAAK4G,QAAUpK,EAAc,OAAQ,OACrCwD,KAAK4G,QAAQuO,aAAa,WAAY,MACtCnV,KAAK4G,QAAQuO,aAAa,OAAQ,UAGlCnV,KAAKiZ,SAAWjZ,KAAK4G,QAIrB5G,KAAKgsB,GAAKxvB,EAAc,WAAY,MAAOwD,KAAK4G,SAChD5G,KAAKwQ,WAAahU,EAAc,oBAAqB,UAAWwD,KAAK4G,SACrE5G,KAAK+E,UAAYvI,EAAc,kBAAmB,MAAOwD,KAAKwQ,YAG9DxQ,KAAKwQ,WAAW2E,aAAa,uBAAwB,YACrDnV,KAAK+E,UAAUoQ,aAAa,YAAa,OACzCnV,KAAK+E,UAAUoQ,aAAa,KAAM,eAElCnV,KAAK8F,WAAW8qB,gBAEhB5wB,KAAKqf,GAAK,IAAIO,GAAG5f,MACjBA,KAAKqf,GAAGwR,QAGP7wB,KAAKiB,QAAQtE,YAAcE,SAASi0B,MAAMh0B,YAAYkD,KAAK4G,QAChE,GAGA,CAAAhM,IAAA,iBAAAC,MAQE,WACE,OCzrBG,SAAwB8G,EAAOD,EAAUwhB,GAE9C,IAAMlV,EAAQkV,EAASzgB,SAAS,cAAe,CAC7Cd,MAAAA,EACAD,SAAAA,EACAwhB,SAAAA,IAGF,GAAIlV,EAAM+iB,YAER,OAAO/iB,EAAM+iB,YAGf,IAEIA,EAEAC,EAJIpqB,EAAYlF,EAAZkF,QAMR,GAAIA,IAA8C,IAAnCsc,EAASjiB,QAAQgwB,cAAyB,CACvD,IAAMA,EAAgB/N,EAASjiB,QAAQgwB,eAAiB,MACxDD,EAAYpqB,EAAQ0pB,QAAQW,GACxBrqB,EAA6CA,EAAQ0iB,cAAc2H,EAC3E,CAgBE,OAdAD,EAAY9N,EAASlF,aAAa,UAAWgT,EAAWtvB,EAAUC,MAM9DovB,EAHGrvB,EAASyoB,aA1ElB,SAAmCvtB,EAAIs0B,EAAYC,GACjD,IAAMC,EAAgBx0B,EAAGy0B,wBAInB5tB,EAAS2tB,EAAclyB,MAAQgyB,EAC/BxtB,EAAS0tB,EAAcjyB,OAASgyB,EAChCG,EAAgB7tB,EAASC,EAASD,EAASC,EAE3C6tB,GAAWH,EAAclyB,MAAQgyB,EAAaI,GAAiB,EAC/DE,GAAWJ,EAAcjyB,OAASgyB,EAAcG,GAAiB,EASjEpsB,EAAS,CACbhI,EAAGk0B,EAAcK,KAAOF,EACxBp0B,EAAGi0B,EAAcM,IAAMF,EACvBxyB,EAAGkyB,EAAaI,GAYlB,OAPApsB,EAAOgnB,UAAY,CACjBltB,EAAGoyB,EAAclyB,MACjBD,EAAGmyB,EAAcjyB,OACjBjC,EAAGq0B,EACHp0B,EAAGq0B,GAGEtsB,CACT,CA0CoBysB,CACZX,EACAtvB,EAASxC,OAASwC,EAAS1C,GAAK,EAChC0C,EAASvC,QAAUuC,EAASzC,GAAK,GA/FzC,SAA4BrC,GAC1B,IAAMw0B,EAAgBx0B,EAAGy0B,wBACzB,MAAO,CACLn0B,EAAGk0B,EAAcK,KACjBt0B,EAAGi0B,EAAcM,IACjB1yB,EAAGoyB,EAAclyB,MAErB,CAmFoB0yB,CAAmBZ,IAU9B9N,EAASlF,aAAa,cAAe+S,EAAarvB,EAAUC,EACrE,CDipBWkqB,CACL7rB,KAAKsE,UACLtE,KAAK0I,UAAY1I,KAAK0I,UAAU7F,KAAO7C,KAAKuuB,iBAC5CvuB,KAEN,GAEA,CAAApF,IAAA,UAAAC,MAIE,WACE,OAAQmF,KAAKiB,QAAQkd,MAAQne,KAAKqV,cAAgB,CACtD,GAEA,CAAAza,IAAA,kBAAAC,MAKE,SAAgBoG,GAOd,OANIvB,OAAO2wB,WAAW,4CAA4CC,UAChErvB,EAAQyqB,sBAAwB,OAChCzqB,EAAQgH,sBAAwB,GAIlC4pB,EAAAA,EAAA,GACKjE,IACA3sB,EAET,KAAG8sB,CAAA,CAhiBa,CAASvG","sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","js/util/util.js","js/util/dom-events.js","js/util/viewport-size.js","js/slide/pan-bounds.js","js/slide/zoom-level.js","js/slide/slide.js","js/gestures/drag-handler.js","js/gestures/zoom-handler.js","js/gestures/tap-handler.js","js/gestures/gestures.js","js/main-scroll.js","js/keyboard.js","js/util/css-animation.js","js/util/spring-easer.js","js/util/spring-animation.js","js/util/animations.js","js/scroll-wheel.js","js/ui/ui-element.js","js/ui/button-arrow.js","js/ui/button-close.js","js/ui/button-zoom.js","js/ui/loading-indicator.js","js/ui/counter-indicator.js","js/ui/ui.js","js/core/eventable.js","js/slide/placeholder.js","js/slide/content.js","js/slide/loader.js","js/core/base.js","js/opener.js","js/photoswipe.js","js/slide/get-thumb-bounds.js"],"sourcesContent":["import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import { clamp } from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement} [element] thumbnail element\r\n * @prop {string} [src] image URL\r\n * @prop {string} [srcset] image srcset\r\n * @prop {number} [w] image width (deprecated)\r\n * @prop {number} [h] image height (deprecated)\r\n * @prop {number} [width] image width\r\n * @prop {number} [height] image height\r\n * @prop {string} [msrc] placeholder image URL that's displayed before large image is loaded\r\n * @prop {string} [alt] image alt text\r\n * @prop {boolean} [thumbCropped] whether thumbnail is cropped client-side or not\r\n * @prop {string} [html] html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template T, P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', /** @type EventListener */(this._onFocusIn.bind(this)));\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n"],"names":["_defineProperty","obj","key","value","toPropertyKey","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","concat","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","get","e","DOMEvents","_classCallCheck","this","_pool","_createClass","type","listener","passive","_toggleListener","_this","poolItem","unbind","skipPool","_this2","methodName","split","eType","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","getPanAreaSize","PanBounds","slide","currZoomLevel","center","_updateAxis","dispatch","reset","axis","elSize","data","panAreaSize","panOffset","ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","optionPrefix","optionName","optionValue","_parseZoomLevelOption","Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","activate","deactivate","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","mainScroll","isShifted","defaultPrevented","append","hasSlide","remove","update","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","_this$content$placeho","placeholder","element","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","_this3","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","zoomTo","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","correctPan","panX","panY","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","stopAll","_this$gestures","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","velocity","_this$pswp","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","_this4","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","start","end","onUpdate","pos","animationProgressRatio","floor","_this$gestures2","_this$pswp2","delta","newMainScrollX","isPannable","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","_this$pswp$currSlide$","_this$pswp$currSlide","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","_this$gestures3","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","actionName","_this$gestures$pswp$e","actionFullName","toggleZoom","clickToCloseNonZoomable","toggle","call","Gestures","_this5","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","add","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","preventDefault","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","change","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","_this6","indexOf","tapDelay","doubleTapAction","doubleTap","setTimeout","tap","click","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","_this7","newSlideWidth","spacing","slideWidthChanged","itemHolder","resize","setAttribute","display","getNumItems","animate","velocityX","_this8","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","_this$itemHolders$","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","resetPosition","setIsActive","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","isKeySupported","Keyboard","_this9","_wasFocused","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","focus","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","_props$prop","_this10","_props$onFinish","onFinish","_props$duration","_props$easing","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","deltaPosition","deltaTime","coeff","naturalDumpingPow","pow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_this11","_raf","_props$onFinish2","easer","prevTime","animationLoop","easeFrame","Animations","activeAnimations","_start","isSpring","_this12","animation","stop","destroy","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","_container","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","_pswp$currSlide","isLoading","_pswp$currSlide2","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","_this13","sort","a","b","uiElementData","registerElement","_pswp$element","_onZoomPanUpdate","elementData","_this$pswp3","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","fn","_this$_filters$name","_this$_filters$name2","_this$pswp4","priority","f1","f2","addFilter","removeFilter","_this$_filters$name3","_this14","_len","args","Array","_key","_this$_listeners$name","_this$pswp5","_this$pswp6","off","_this$_listeners$name2","_this15","Placeholder","imageSrc","imgEl","decoding","alt","src","_this$element","parentNode","Content","instance","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","_this16","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","_this$data$src","_this$data$alt","_this17","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","removePlaceholder","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","_this$instance$option","_this$instance$option2","errorMsgEl","errorMsg","_this18","supportsDecode","decode","catch","finally","appendImage","lazyLoadData","zoomLevel","createContentFromData","lazyLoad","ceil","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","getItemData","lazyLoadSlide","addToCache","setSlide","removeByIndex","indexToRemove","item","find","PhotoSwipeBase","_Eventable","_inherits","_super","_createSuper","_this$options","numItems","dataSource","_getGalleryDOMElements","gallery","_this$options2","dataSourceItem","isArray","Element","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","_thumbnailEl$getAttri","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","_this19","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","_options$showHideOpac","_this$pswp$currSlide2","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","getPlaceholderElement","_animateZoom","bg","opacity","innerRect","overflow","_setClosedStateZoomPan","willChange","_this20","Promise","resolve","img","decoded","isDelaying","reject","_initiate","_this$pswp$element","_this$pswp$element2","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_pswp$currSlide3","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","_this21","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_PhotoSwipeBase","_super2","_this22","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","_assertThisInitialized","keyboard","_this23","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","open","_itemHolder$slide","goTo","_this$currSlide","_len2","_key2","_this$currSlide2","removeAll","_this$element2","_itemHolder$slide2","slideIndex","_this24","_this24$currSlide$ind","_this24$currSlide","_itemHolder$slide3","potentialHolderIndex","holder","matchMedia","matches","_this$element3","_this25","test","userAgent","setScrollOffset","appendHolders","init","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement","_objectSpread"],"sourceRoot":""}